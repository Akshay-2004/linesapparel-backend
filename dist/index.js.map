{"version":3,"sources":["../src/config/shopify.config.ts","../src/services/shopify.service.ts","../src/utils/response.util.ts","../src/controllers/shopify.controller.ts","../src/controllers/webhook.controller.ts","../src/middleware/validateWebhook.middleware.ts","../src/models/user.model.ts","../src/middleware/auth.middleware.ts","../src/routes/shopify.routes.ts","../src/controllers/auth.controller.ts","../src/routes/auth.routes.ts","../src/models/page.model.ts","../src/utils/cloudinary.ts","../src/utils/homepage.helpers.ts","../src/utils/imageUpload.helpers.ts","../src/controllers/page.controller.ts","../src/routes/pages.routes.ts","../src/models/testimonials.model.ts","../src/controllers/testimonial.controller.ts","../src/routes/testimonials.routes.ts","../src/models/inquiry.model.ts","../src/controllers/inquiry.controller.ts","../src/routes/inquiry.routes.ts","../src/controllers/user.controller.ts","../src/routes/user.routes.ts","../src/models/review.model.ts","../src/controllers/review.controller.ts","../src/routes/reviews.routes.ts","../src/models/cart.model.ts","../src/controllers/cart.controller.ts","../src/routes/cart.routes.ts","../src/api.router.ts","../src/middleware/errorHandler.middleware.ts","../src/config/db.config.ts","../src/app.ts","../src/index.ts"],"names":["createHmac","crypto","EUserRole","Schema","bcrypt","mongoose","jwt","Router","express","cloudinary","CloudinaryStorage","multer","axios","fs","uuidv4","dotenv","cookieParser","cors"],"mappings":"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","file":"index.js","sourcesContent":["export const shopifyConfig = {\r\n  apiKey: process.env.SHOPIFY_API_KEY || '',\r\n  apiSecret: process.env.SHOPIFY_API_SECRET || '',\r\n  storeUrl: process.env.SHOPIFY_STORE_URL || '',\r\n  accessToken: process.env.SHOPIFY_ACCESS_TOKEN || '',\r\n  apiVersion: '2023-07', // Using a stable API version\r\n  scopes: [\r\n    'read_products', \r\n    'write_products', \r\n    'read_orders', \r\n    'write_orders',\r\n    'read_customers', \r\n    'write_customers',\r\n    'read_inventory', \r\n    'write_inventory',\r\n    'read_fulfillments', \r\n    'write_fulfillments',\r\n    'read_shipping', \r\n    'write_shipping',\r\n    'read_analytics'\r\n  ].join(','),\r\n  webhooks: {\r\n    orderCreated: {\r\n      topic: 'orders/create',\r\n      address: `${process.env.APP_URL || 'https://your-app.com'}/api/shopify/webhook/order-created`\r\n    },\r\n    orderUpdated: {\r\n      topic: 'orders/updated',\r\n      address: `${process.env.APP_URL || 'https://your-app.com'}/api/shopify/webhook/order-updated`\r\n    },\r\n    productUpdated: {\r\n      topic: 'products/update',\r\n      address: `${process.env.APP_URL || 'https://your-app.com'}/api/shopify/webhook/product-updated`\r\n    },\r\n    inventoryUpdated: {\r\n      topic: 'inventory_levels/update',\r\n      address: `${process.env.APP_URL || 'https://your-app.com'}/api/shopify/webhook/inventory-updated`\r\n    }\r\n  }\r\n};\r\n\r\n// Validate Shopify configuration\r\nexport const validateShopifyConfig = (): boolean => {\r\n  const { apiKey, apiSecret, storeUrl, accessToken } = shopifyConfig;\r\n  \r\n  if (!apiKey || !apiSecret || !storeUrl || !accessToken) {\r\n    console.error('❌ Missing Shopify configuration. Please check your .env file.');\r\n    return false;\r\n  }\r\n  \r\n  // Check if store URL is formatted correctly\r\n  if (!storeUrl.includes('myshopify.com') && !storeUrl.includes('shopify.com')) {\r\n    console.warn('⚠️ Shopify store URL might be invalid. Expected format: yourstore.myshopify.com');\r\n  }\r\n  \r\n  console.log('✅ Shopify configuration validated');\r\n  return true;\r\n};\r\n","import { shopifyConfig } from \"@/config/shopify.config\";\r\nimport { createHmac } from \"crypto\";\r\n\r\ntype QueryParams = Record<string, any>;\r\ntype ShopifyResponse<T> = {\r\n  data: T;\r\n  headers: Headers;\r\n  status: number;\r\n};\r\n\r\nclass ShopifyService {\r\n  private baseUrl: string;\r\n  private headers: HeadersInit;\r\n\r\n  constructor() {\r\n    this.baseUrl = `https://${shopifyConfig.storeUrl}/admin/api/${shopifyConfig.apiVersion}`;\r\n    this.headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"X-Shopify-Access-Token\": shopifyConfig.accessToken,\r\n    };\r\n  }\r\n\r\n  private async makeRequest<T>(\r\n    endpoint: string,\r\n    method: string = \"GET\",\r\n    data?: any\r\n  ): Promise<ShopifyResponse<T>> {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n\r\n    const options: RequestInit = {\r\n      method,\r\n      headers: this.headers,\r\n    };\r\n\r\n    if (data && (method === \"POST\" || method === \"PUT\")) {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n\r\n      // Check if the response is OK\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(\r\n          `Shopify API error (${response.status}): ${JSON.stringify(errorData)}`\r\n        );\r\n      }\r\n\r\n      // Handle no content responses (like DELETE operations)\r\n      if (response.status === 204) {\r\n        return {\r\n          data: {} as T,\r\n          headers: response.headers,\r\n          status: response.status,\r\n        };\r\n      }\r\n\r\n      const responseData = await response.json();\r\n\r\n      return {\r\n        data: responseData,\r\n        headers: response.headers,\r\n        status: response.status,\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error making request to ${endpoint}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGraphQLRequest(\r\n    query: string,\r\n    variables?: any\r\n  ): Promise<any> {\r\n    const url = `https://${shopifyConfig.storeUrl}/admin/api/${shopifyConfig.apiVersion}/graphql.json`;\r\n\r\n    const options: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-Shopify-Access-Token\": shopifyConfig.accessToken,\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables: variables || {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(\r\n          `Shopify GraphQL API error (${response.status}): ${JSON.stringify(\r\n            errorData\r\n          )}`\r\n        );\r\n      }\r\n\r\n      const responseData = await response.json();\r\n\r\n      // Check for GraphQL errors\r\n      if (responseData.errors && responseData.errors.length > 0) {\r\n        throw new Error(\r\n          `GraphQL errors: ${JSON.stringify(responseData.errors)}`\r\n        );\r\n      }\r\n\r\n      return responseData;\r\n    } catch (error) {\r\n      console.error(\"Error making GraphQL request:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private buildQueryString(params: QueryParams): string {\r\n    if (!params || Object.keys(params).length === 0) return \"\";\r\n\r\n    const validParams = Object.entries(params)\r\n      .filter(([_, value]) => value !== undefined && value !== null)\r\n      .map(\r\n        ([key, value]) =>\r\n          `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\r\n      );\r\n\r\n    return validParams.length > 0 ? `?${validParams.join(\"&\")}` : \"\";\r\n  }\r\n\r\n  // Authentication methods\r\n  async handleOAuthCallback(code: string, shop: string) {\r\n    try {\r\n      const url = `https://${shop}/admin/oauth/access_token`;\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          client_id: shopifyConfig.apiKey,\r\n          client_secret: shopifyConfig.apiSecret,\r\n          code,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`OAuth error: ${response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"OAuth callback error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async validateCurrentSession() {\r\n    try {\r\n      const response = await this.makeRequest<any>(\"/shop.json\");\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Product methods\r\n  async getProducts(params: QueryParams = {}) {\r\n    const queryString = this.buildQueryString(params);\r\n    const response = await this.makeRequest<any>(\r\n      `/products.json${queryString}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getProduct(productId: string) {\r\n    const response = await this.makeRequest<any>(`/products/${productId}.json`);\r\n    return response.data.product;\r\n  }\r\n\r\n  async createProduct(productData: any) {\r\n    const response = await this.makeRequest<any>(\"/products.json\", \"POST\", {\r\n      product: productData,\r\n    });\r\n    return response.data.product;\r\n  }\r\n\r\n  async updateProduct(productId: string, productData: any) {\r\n    const response = await this.makeRequest<any>(\r\n      `/products/${productId}.json`,\r\n      \"PUT\",\r\n      { product: productData }\r\n    );\r\n    return response.data.product;\r\n  }\r\n\r\n  async deleteProduct(productId: string) {\r\n    await this.makeRequest<void>(`/products/${productId}.json`, \"DELETE\");\r\n    return { success: true };\r\n  }\r\n\r\n  async getProductVariants(productId: string) {\r\n    const response = await this.makeRequest<any>(\r\n      `/products/${productId}/variants.json`\r\n    );\r\n    return response.data.variants;\r\n  }\r\n\r\n  // Order methods\r\n  async getOrders(params: QueryParams = {}) {\r\n    const queryString = this.buildQueryString(params);\r\n    const response = await this.makeRequest<any>(`/orders.json${queryString}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getOrder(orderId: string) {\r\n    const response = await this.makeRequest<any>(`/orders/${orderId}.json`);\r\n    return response.data.order;\r\n  }\r\n\r\n  async createOrder(orderData: any) {\r\n    const response = await this.makeRequest<any>(\"/orders.json\", \"POST\", {\r\n      order: orderData,\r\n    });\r\n    return response.data.order;\r\n  }\r\n\r\n  async updateOrder(orderId: string, orderData: any) {\r\n    const response = await this.makeRequest<any>(\r\n      `/orders/${orderId}.json`,\r\n      \"PUT\",\r\n      { order: orderData }\r\n    );\r\n    return response.data.order;\r\n  }\r\n\r\n  async getOrdersByStatus(status: string) {\r\n    return this.getOrders({ status });\r\n  }\r\n\r\n  async fulfillOrder(orderId: string, fulfillmentData: any) {\r\n    const response = await this.makeRequest<any>(\r\n      `/orders/${orderId}/fulfillments.json`,\r\n      \"POST\",\r\n      { fulfillment: fulfillmentData }\r\n    );\r\n    return response.data.fulfillment;\r\n  }\r\n\r\n  async cancelOrder(orderId: string) {\r\n    const response = await this.makeRequest<any>(\r\n      `/orders/${orderId}/cancel.json`,\r\n      \"POST\"\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Customer methods\r\n  async getCustomers(params: QueryParams = {}) {\r\n    const queryString = this.buildQueryString(params);\r\n    const response = await this.makeRequest<any>(\r\n      `/customers.json${queryString}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getCustomer(customerId: string) {\r\n    const response = await this.makeRequest<any>(\r\n      `/customers/${customerId}.json`\r\n    );\r\n    return response.data.customer;\r\n  }\r\n\r\n  async createCustomer(customerData: any) {\r\n    const response = await this.makeRequest<any>(\"/customers.json\", \"POST\", {\r\n      customer: customerData,\r\n    });\r\n    return response.data.customer;\r\n  }\r\n\r\n  async updateCustomer(customerId: string, customerData: any) {\r\n    const response = await this.makeRequest<any>(\r\n      `/customers/${customerId}.json`,\r\n      \"PUT\",\r\n      { customer: customerData }\r\n    );\r\n    return response.data.customer;\r\n  }\r\n\r\n  async getCustomerOrders(customerId: string) {\r\n    return this.getOrders({ customer_id: customerId });\r\n  }\r\n\r\n  async searchCustomers(query: string) {\r\n    return this.getCustomers({ query });\r\n  }\r\n\r\n  // Inventory methods\r\n  async getInventoryLevels(locationId?: string) {\r\n    const queryString = locationId ? `?location_id=${locationId}` : \"\";\r\n    const response = await this.makeRequest<any>(\r\n      `/inventory_levels.json${queryString}`\r\n    );\r\n    return response.data.inventory_levels;\r\n  }\r\n\r\n  async adjustInventory(adjustmentData: any) {\r\n    const response = await this.makeRequest<any>(\r\n      \"/inventory_levels/adjust.json\",\r\n      \"POST\",\r\n      adjustmentData\r\n    );\r\n    return response.data.inventory_level;\r\n  }\r\n\r\n  async getInventoryLocations() {\r\n    const response = await this.makeRequest<any>(\"/locations.json\");\r\n    return response.data.locations;\r\n  }\r\n\r\n  // Collection methods\r\n  async getCollections() {\r\n    const customResponse = await this.makeRequest<any>(\r\n      \"/custom_collections.json\"\r\n    );\r\n    const smartResponse = await this.makeRequest<any>(\r\n      \"/smart_collections.json\"\r\n    );\r\n\r\n    return {\r\n      custom_collections: customResponse.data.custom_collections,\r\n      smart_collections: smartResponse.data.smart_collections,\r\n    };\r\n  }\r\n\r\n  async getCollection(\r\n    collectionId: string,\r\n    type: \"custom\" | \"smart\" = \"custom\"\r\n  ) {\r\n    const endpoint =\r\n      type === \"custom\"\r\n        ? `/custom_collections/${collectionId}.json`\r\n        : `/smart_collections/${collectionId}.json`;\r\n\r\n    const response = await this.makeRequest<any>(endpoint);\r\n    return type === \"custom\"\r\n      ? response.data.custom_collection\r\n      : response.data.smart_collection;\r\n  }\r\n\r\n  async getCollectionProducts(collectionId: string) {\r\n    const response = await this.makeRequest<any>(\r\n      `/collections/${collectionId}/products.json`\r\n    );\r\n    return response.data.products;\r\n  }\r\n\r\n  async createCollection(\r\n    collectionData: any,\r\n    type: \"custom\" | \"smart\" = \"custom\"\r\n  ) {\r\n    const endpoint =\r\n      type === \"custom\"\r\n        ? \"/custom_collections.json\"\r\n        : \"/smart_collections.json\";\r\n    const dataKey =\r\n      type === \"custom\" ? \"custom_collection\" : \"smart_collection\";\r\n\r\n    const response = await this.makeRequest<any>(endpoint, \"POST\", {\r\n      [dataKey]: collectionData,\r\n    });\r\n\r\n    return response.data[dataKey];\r\n  }\r\n\r\n  async updateCollection(\r\n    collectionId: string,\r\n    collectionData: any,\r\n    type: \"custom\" | \"smart\" = \"custom\"\r\n  ) {\r\n    const endpoint =\r\n      type === \"custom\"\r\n        ? `/custom_collections/${collectionId}.json`\r\n        : `/smart_collections/${collectionId}.json`;\r\n\r\n    const dataKey =\r\n      type === \"custom\" ? \"custom_collection\" : \"smart_collection\";\r\n\r\n    const response = await this.makeRequest<any>(endpoint, \"PUT\", {\r\n      [dataKey]: collectionData,\r\n    });\r\n\r\n    return response.data[dataKey];\r\n  }\r\n\r\n  async getCollectionByHandle(handle: string, limit: number) {\r\n    try {\r\n      // Use GraphQL to query collection by handle\r\n      const query = `\r\n        query getCollectionByHandle($handle: String!, $limit: Int!) {\r\n          collectionByHandle(handle: $handle) {\r\n            id\r\n            handle\r\n            title\r\n            description\r\n            image {\r\n              url\r\n              altText\r\n            }\r\n            products(first: $limit) {\r\n              edges {\r\n                node {\r\n                  id\r\n                  handle\r\n                  title\r\n                  description\r\n                  images(first: 10) {\r\n                    edges {\r\n                      node {\r\n                        url\r\n                        altText\r\n                      }\r\n                    }\r\n                  }\r\n                  variants(first: 100) {\r\n                    edges {\r\n                      node {\r\n                        id\r\n                        title\r\n                        price\r\n                        compareAtPrice\r\n                        availableForSale\r\n                        inventoryQuantity\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = { handle, limit };\r\n      const response = await this.makeGraphQLRequest(query, variables);\r\n\r\n      return response.data?.collectionByHandle || null;\r\n    } catch (error) {\r\n      console.error(\"Error fetching collection by handle:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Webhook methods\r\n  async registerWebhook(webhookData: any) {\r\n    const response = await this.makeRequest<any>(\"/webhooks.json\", \"POST\", {\r\n      webhook: webhookData,\r\n    });\r\n    return response.data.webhook;\r\n  }\r\n\r\n  async removeWebhook(webhookId: string) {\r\n    await this.makeRequest<void>(`/webhooks/${webhookId}.json`, \"DELETE\");\r\n    return { success: true };\r\n  }\r\n\r\n  async listWebhooks() {\r\n    const response = await this.makeRequest<any>(\"/webhooks.json\");\r\n    return response.data.webhooks;\r\n  }\r\n\r\n  // Analytics and reporting methods\r\n  async getSalesAnalytics(startDate: string, endDate: string) {\r\n    const params = { created_at_min: startDate, created_at_max: endDate };\r\n    const orders = await this.getOrders(params);\r\n\r\n    // Process orders to generate analytics\r\n    // This is just an example - you'd need to customize this for your needs\r\n    const totalSales = orders.orders.reduce(\r\n      (sum: number, order: any) => sum + parseFloat(order.total_price),\r\n      0\r\n    );\r\n    const totalOrders = orders.orders.length;\r\n    const averageOrderValue = totalSales / totalOrders || 0;\r\n\r\n    return {\r\n      totalSales,\r\n      totalOrders,\r\n      averageOrderValue,\r\n      startDate,\r\n      endDate,\r\n      currency: orders.orders[0]?.currency || \"USD\",\r\n    };\r\n  }\r\n\r\n  async getCustomerAnalytics() {\r\n    const customers = await this.getCustomers({ limit: 250 });\r\n\r\n    // Example analytics processing\r\n    const total = customers.customers.length;\r\n\r\n    return {\r\n      totalCustomers: total,\r\n      // Add more metrics as needed\r\n    };\r\n  }\r\n\r\n  async getProductAnalytics() {\r\n    const products = await this.getProducts({ limit: 250 });\r\n\r\n    // Example analytics processing\r\n    const totalProducts = products.products.length;\r\n    const totalInventory = products.products.reduce(\r\n      (sum: number, product: any) => {\r\n        const inventoryTotal = product.variants.reduce(\r\n          (variantSum: number, variant: any) =>\r\n            variantSum + (variant.inventory_quantity || 0),\r\n          0\r\n        );\r\n        return sum + inventoryTotal;\r\n      },\r\n      0\r\n    );\r\n\r\n    return {\r\n      totalProducts,\r\n      totalInventory,\r\n      // Add more metrics as needed\r\n    };\r\n  }\r\n\r\n  async generateSalesReport(\r\n    startDate: string,\r\n    endDate: string,\r\n    format: string = \"json\"\r\n  ) {\r\n    const params = {\r\n      created_at_min: startDate,\r\n      created_at_max: endDate,\r\n      limit: 250,\r\n    };\r\n    const response = await this.getOrders(params);\r\n    const orders = response.orders;\r\n\r\n    if (format === \"json\") {\r\n      return orders;\r\n    } else if (format === \"csv\") {\r\n      // Generate CSV\r\n      const header = \"Order ID,Date,Customer,Total,Status\\n\";\r\n      const rows = orders\r\n        .map((order: any) => {\r\n          return `${order.id},${order.created_at},${\r\n            order.customer?.email || \"N/A\"\r\n          },${order.total_price},${order.financial_status}`;\r\n        })\r\n        .join(\"\\n\");\r\n\r\n      return header + rows;\r\n    }\r\n\r\n    return orders; // Default to JSON\r\n  }\r\n\r\n  // Webhook processing methods\r\n  async processNewOrder(orderData: any) {\r\n    // Process new order from webhook\r\n    console.log(\"Processing new order\", orderData.id);\r\n    // Implement your business logic here\r\n    return true;\r\n  }\r\n\r\n  async processOrderUpdate(orderData: any) {\r\n    // Process order update from webhook\r\n    console.log(\"Processing order update\", orderData.id);\r\n    // Implement your business logic here\r\n    return true;\r\n  }\r\n\r\n  async processProductUpdate(productData: any) {\r\n    // Process product update from webhook\r\n    console.log(\"Processing product update\", productData.id);\r\n    // Implement your business logic here\r\n    return true;\r\n  }\r\n\r\n  async processInventoryUpdate(inventoryData: any) {\r\n    // Process inventory update from webhook\r\n    console.log(\r\n      \"Processing inventory update for item\",\r\n      inventoryData.inventory_item_id\r\n    );\r\n    // Implement your business logic here\r\n    return true;\r\n  }\r\n\r\n  // Helper methods for webhook validation\r\n  validateHmac(body: string, hmac: string): boolean {\r\n    const calculatedHmac = createHmac(\"sha256\", shopifyConfig.apiSecret)\r\n      .update(body, \"utf8\")\r\n      .digest(\"base64\");\r\n\r\n    return calculatedHmac === hmac;\r\n  }\r\n\r\n  async getProductByHandle(handle: string) {\r\n    try {\r\n      // Use GraphQL to query product by handle for more efficient data fetching\r\n      const query = `\r\n        query getProductByHandle($handle: String!) {\r\n          productByHandle(handle: $handle) {\r\n            id\r\n            title\r\n            handle\r\n            description\r\n            descriptionHtml\r\n            vendor\r\n            productType\r\n            tags\r\n            images(first: 10) {\r\n              edges {\r\n                node {\r\n                  url\r\n                  altText\r\n                }\r\n              }\r\n            }\r\n            variants(first: 100) {\r\n              edges {\r\n                node {\r\n                  id\r\n                  title\r\n                  price\r\n                  compareAtPrice\r\n                  sku\r\n                  availableForSale\r\n                  inventoryQuantity\r\n                  selectedOptions {\r\n                    name\r\n                    value\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            options {\r\n              name\r\n              values\r\n            }\r\n          }\r\n        }\r\n      `;\r\n\r\n      const variables = { handle };\r\n      const response = await this.makeGraphQLRequest(query, variables);\r\n      return response.data?.productByHandle || null;\r\n    } catch (error) {\r\n      console.error(\"Error fetching product by handle:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Draft Order methods\r\n  async createDraftOrder(orderData: any): Promise<any> {\r\n    // Ensure the draft order has all required fields for invoice generation\r\n    const draftOrderPayload = {\r\n      ...orderData,\r\n      // Ensure invoice is sent (this generates the invoice_url)\r\n      invoice_sent_at: null,\r\n      // Set up for payment\r\n      use_customer_default_address: orderData.use_customer_default_address || false,\r\n    };\r\n\r\n    const response = await this.makeRequest<any>(\"/draft_orders.json\", \"POST\", {\r\n      draft_order: draftOrderPayload,\r\n    });\r\n    \r\n    const draftOrder = response.data.draft_order;\r\n    \r\n    // If no invoice_url is returned, try to send the invoice\r\n    if (!draftOrder.invoice_url && draftOrder.id) {\r\n      try {\r\n        const invoiceResponse = await this.sendDraftOrderInvoice(draftOrder.id.toString());\r\n        if (invoiceResponse && invoiceResponse.invoice_url) {\r\n          draftOrder.invoice_url = invoiceResponse.invoice_url;\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to send draft order invoice:', error);\r\n      }\r\n    }\r\n    \r\n    return draftOrder;\r\n  }\r\n\r\n  async sendDraftOrderInvoice(draftOrderId: string, customMessage?: string): Promise<any> {\r\n    const payload: any = {};\r\n    if (customMessage) {\r\n      payload.draft_order_invoice = { \r\n        to: null, \r\n        from: null, \r\n        subject: null, \r\n        custom_message: customMessage \r\n      };\r\n    }\r\n    \r\n    const response = await this.makeRequest<any>(\r\n      `/draft_orders/${draftOrderId}/send_invoice.json`,\r\n      \"POST\",\r\n      payload\r\n    );\r\n    return response.data.draft_order_invoice;\r\n  }\r\n\r\n  async completeDraftOrder(draftOrderId: string, paymentPending: boolean = false): Promise<any> {\r\n    const response = await this.makeRequest<any>(\r\n      `/draft_orders/${draftOrderId}/complete.json`,\r\n      \"PUT\",\r\n      { payment_pending: paymentPending }\r\n    );\r\n    return response.data.draft_order;\r\n  }\r\n\r\n  async getDraftOrder(draftOrderId: string): Promise<any> {\r\n    const response = await this.makeRequest<any>(`/draft_orders/${draftOrderId}.json`);\r\n    return response.data.draft_order;\r\n  }\r\n}\r\n\r\nexport default new ShopifyService();\r\n","import { Response } from \"express\";\r\nimport { ApiResponse } from \"@/interfaces/api.interface\";\r\n\r\nexport const sendResponse = <T>(\r\n  res: Response,\r\n  statusCode: number,\r\n  message: string,\r\n  data?: T,\r\n  error?: string\r\n) => {\r\n  const response: ApiResponse<T> = {\r\n    statusCode,\r\n    message,\r\n    ...(data && { data }),\r\n    ...(error && { error }),\r\n  };\r\n\r\n  return res.status(statusCode).json(response);\r\n};\r\n","import { Request, Response } from \"express\";\r\nimport shopifyService from \"@/services/shopify.service\";\r\nimport { sendResponse } from \"@/utils/response.util\";\r\n\r\n// Authentication\r\nexport const handleAuthCallback = async (req: Request, res: Response) => {\r\n  try {\r\n    const { code, shop } = req.query;\r\n    const result = await shopifyService.handleOAuthCallback(\r\n      code as string,\r\n      shop as string\r\n    );\r\n    return sendResponse(res, 200, \"Authentication successful\", result);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Authentication failed\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const checkAuthStatus = async (req: Request, res: Response) => {\r\n  try {\r\n    const isValid = await shopifyService.validateCurrentSession();\r\n    return sendResponse(res, 200, \"Auth status checked\", {\r\n      authenticated: isValid,\r\n    });\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      401,\r\n      \"Authentication check failed\",\r\n      { authenticated: false },\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\n// Products\r\nexport const getProducts = async (req: Request, res: Response) => {\r\n  try {\r\n    const limit = parseInt(req.query.limit as string) || 50;\r\n    const collection = req.query.collection as string;\r\n    const query = req.query.query as string;\r\n    const sortBy = req.query.sortBy as string;\r\n    const reverse = req.query.reverse === \"true\";\r\n\r\n    const products = await shopifyService.getProducts({\r\n      limit,\r\n      collection_id: collection,\r\n      query,\r\n      sort: sortBy,\r\n      reverse,\r\n    });\r\n\r\n    return sendResponse(res, 200, \"Products retrieved successfully\", products);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch products\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getProduct = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const product = await shopifyService.getProduct(id);\r\n\r\n    if (!product) {\r\n      return sendResponse(res, 404, \"Product not found\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"Product retrieved successfully\", product);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch product\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const createProduct = async (req: Request, res: Response) => {\r\n  try {\r\n    const productData = req.body;\r\n    const newProduct = await shopifyService.createProduct(productData);\r\n    return sendResponse(res, 201, \"Product created successfully\", newProduct);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to create product\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const updateProduct = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const productData = req.body;\r\n    const updatedProduct = await shopifyService.updateProduct(id, productData);\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Product updated successfully\",\r\n      updatedProduct\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to update product\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await shopifyService.deleteProduct(id);\r\n    return sendResponse(res, 204, \"Product deleted successfully\");\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to delete product\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getProductVariants = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const variants = await shopifyService.getProductVariants(id);\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Product variants retrieved successfully\",\r\n      variants\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch product variants\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\n// Orders\r\nexport const getOrders = async (req: Request, res: Response) => {\r\n  try {\r\n    const limit = parseInt(req.query.limit as string) || 50;\r\n    // const page = parseInt(req.query.page as string) || 1;\r\n    const status = req.query.status as string;\r\n    const financialStatus = req.query.financialStatus as string;\r\n    const fulfillmentStatus = req.query.fulfillmentStatus as string;\r\n\r\n    const orders = await shopifyService.getOrders({\r\n      limit,\r\n      // page,\r\n      status,\r\n      financial_status: financialStatus,\r\n      fulfillment_status: fulfillmentStatus,\r\n    });\r\n\r\n    return sendResponse(res, 200, \"Orders retrieved successfully\", orders);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch orders\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const order = await shopifyService.getOrder(id);\r\n\r\n    if (!order) {\r\n      return sendResponse(res, 404, \"Order not found\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"Order retrieved successfully\", order);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const createOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const orderData = req.body;\r\n\r\n    // Create draft order instead of completed order\r\n    const draftOrder = await shopifyService.createDraftOrder(orderData);\r\n\r\n    return sendResponse(res, 201, \"Draft order created successfully\", {\r\n      draft_order: draftOrder,\r\n      invoice_url: draftOrder.invoice_url, // Shopify's payment portal URL\r\n      draft_order_id: draftOrder.id,\r\n    });\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to create draft order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const completeDraftOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const completedOrder = await shopifyService.completeDraftOrder(id, true);\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Draft order completed successfully\",\r\n      completedOrder\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to complete draft order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const updateOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const orderData = req.body;\r\n    const updatedOrder = await shopifyService.updateOrder(id, orderData);\r\n    return sendResponse(res, 200, \"Order updated successfully\", updatedOrder);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to update order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getOrdersByStatus = async (req: Request, res: Response) => {\r\n  try {\r\n    const { status } = req.params;\r\n    const orders = await shopifyService.getOrdersByStatus(status);\r\n    return sendResponse(res, 200, \"Orders retrieved successfully\", orders);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch orders by status\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const fulfillOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const fulfillmentData = req.body;\r\n    const result = await shopifyService.fulfillOrder(id, fulfillmentData);\r\n    return sendResponse(res, 200, \"Order fulfilled successfully\", result);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fulfill order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const cancelOrder = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const result = await shopifyService.cancelOrder(id);\r\n    return sendResponse(res, 200, \"Order cancelled successfully\", result);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to cancel order\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\n// Customers\r\nexport const getCustomers = async (req: Request, res: Response) => {\r\n  try {\r\n    const limit = parseInt(req.query.limit as string) || 50;\r\n    const page = parseInt(req.query.page as string) || 1;\r\n    const query = req.query.query as string;\r\n\r\n    const customers = await shopifyService.getCustomers({\r\n      limit,\r\n      page,\r\n      query,\r\n    });\r\n\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Customers retrieved successfully\",\r\n      customers\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch customers\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getCustomer = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const customer = await shopifyService.getCustomer(id);\r\n\r\n    if (!customer) {\r\n      return sendResponse(res, 404, \"Customer not found\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"Customer retrieved successfully\", customer);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch customer\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const createCustomer = async (req: Request, res: Response) => {\r\n  try {\r\n    const customerData = req.body;\r\n    const newCustomer = await shopifyService.createCustomer(customerData);\r\n    return sendResponse(res, 201, \"Customer created successfully\", newCustomer);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to create customer\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const updateCustomer = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const customerData = req.body;\r\n    const updatedCustomer = await shopifyService.updateCustomer(\r\n      id,\r\n      customerData\r\n    );\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Customer updated successfully\",\r\n      updatedCustomer\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to update customer\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const getCustomerOrders = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const orders = await shopifyService.getCustomerOrders(id);\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Customer orders retrieved successfully\",\r\n      orders\r\n    );\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch customer orders\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport const searchCustomers = async (req: Request, res: Response) => {\r\n  try {\r\n    const query = req.query.q as string;\r\n    const customers = await shopifyService.searchCustomers(query);\r\n    return sendResponse(res, 200, \"Customer search completed\", customers);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to search customers\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\n// Inventory\r\nexport const getInventoryLevels = async (req: Request, res: Response) => {\r\n  try {\r\n    const locationId = req.query.location_id as string;\r\n    const inventoryLevels = await shopifyService.getInventoryLevels(locationId);\r\n    res.json(inventoryLevels);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch inventory levels\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const adjustInventory = async (req: Request, res: Response) => {\r\n  try {\r\n    const adjustmentData = req.body;\r\n    const result = await shopifyService.adjustInventory(adjustmentData);\r\n    res.json(result);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to adjust inventory\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getInventoryLocations = async (req: Request, res: Response) => {\r\n  try {\r\n    const locations = await shopifyService.getInventoryLocations();\r\n    res.json(locations);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch inventory locations\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Collections\r\nexport const getCollections = async (req: Request, res: Response) => {\r\n  try {\r\n    const collections = await shopifyService.getCollections();\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Collections retrieved successfully\",\r\n      collections\r\n    );\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch collections\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getCollection = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const collection = await shopifyService.getCollection(id);\r\n\r\n    if (!collection) {\r\n      return res.status(404).json({ error: \"Collection not found\" });\r\n    }\r\n\r\n    res.json(collection);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch collection\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getCollectionByHandle = async (req: Request, res: Response) => {\r\n  try {\r\n    const { handle } = req.params;\r\n    const limit = parseInt(req.query.limit as string) || 50;\r\n\r\n    const collection = await shopifyService.getCollectionByHandle(\r\n      handle,\r\n      limit\r\n    );\r\n\r\n    if (!collection) {\r\n      return res.status(404).json({ error: \"Collection not found\" });\r\n    }\r\n\r\n    return sendResponse(\r\n      res,\r\n      200,\r\n      \"Collection retrieved successfully\",\r\n      collection\r\n    );\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch collection by handle\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getCollectionProducts = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const products = await shopifyService.getCollectionProducts(id);\r\n    res.json(products);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch collection products\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createCollection = async (req: Request, res: Response) => {\r\n  try {\r\n    const collectionData = req.body;\r\n    const newCollection = await shopifyService.createCollection(collectionData);\r\n    res.status(201).json(newCollection);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to create collection\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateCollection = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const collectionData = req.body;\r\n    const updatedCollection = await shopifyService.updateCollection(\r\n      id,\r\n      collectionData\r\n    );\r\n    res.json(updatedCollection);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to update collection\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Webhooks\r\nexport const registerWebhook = async (req: Request, res: Response) => {\r\n  try {\r\n    const webhookData = req.body;\r\n    const result = await shopifyService.registerWebhook(webhookData);\r\n    res.status(201).json(result);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to register webhook\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const removeWebhook = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await shopifyService.removeWebhook(id);\r\n    res.status(204).send();\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to remove webhook\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listWebhooks = async (req: Request, res: Response) => {\r\n  try {\r\n    const webhooks = await shopifyService.listWebhooks();\r\n    res.json(webhooks);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to list webhooks\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Analytics and reports\r\nexport const getSalesAnalytics = async (req: Request, res: Response) => {\r\n  try {\r\n    const startDate = req.query.startDate as string;\r\n    const endDate = req.query.endDate as string;\r\n    const analytics = await shopifyService.getSalesAnalytics(\r\n      startDate,\r\n      endDate\r\n    );\r\n    res.json(analytics);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch sales analytics\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getCustomerAnalytics = async (req: Request, res: Response) => {\r\n  try {\r\n    const analytics = await shopifyService.getCustomerAnalytics();\r\n    res.json(analytics);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch customer analytics\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProductAnalytics = async (req: Request, res: Response) => {\r\n  try {\r\n    const analytics = await shopifyService.getProductAnalytics();\r\n    res.json(analytics);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to fetch product analytics\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const generateSalesReport = async (req: Request, res: Response) => {\r\n  try {\r\n    const startDate = req.query.startDate as string;\r\n    const endDate = req.query.endDate as string;\r\n    const format = (req.query.format as string) || \"json\";\r\n\r\n    const report = await shopifyService.generateSalesReport(\r\n      startDate,\r\n      endDate,\r\n      format\r\n    );\r\n\r\n    if (format === \"csv\") {\r\n      res.setHeader(\"Content-Type\", \"text/csv\");\r\n      res.setHeader(\r\n        \"Content-Disposition\",\r\n        \"attachment; filename=sales-report.csv\"\r\n      );\r\n      return res.send(report);\r\n    }\r\n\r\n    res.json(report);\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      error: \"Failed to generate sales report\",\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProductByHandle = async (req: Request, res: Response) => {\r\n  try {\r\n    const { handle } = req.params;\r\n    const product = await shopifyService.getProductByHandle(handle);\r\n\r\n    if (!product) {\r\n      return sendResponse(res, 404, \"Product not found\");\r\n    }\r\n\r\n    return sendResponse(res, 200, \"Product retrieved successfully\", product);\r\n  } catch (error: any) {\r\n    return sendResponse(\r\n      res,\r\n      500,\r\n      \"Failed to fetch product by handle\",\r\n      undefined,\r\n      error.message\r\n    );\r\n  }\r\n};\r\n","import { Request, Response } from 'express';\r\nimport shopifyService from '@/services/shopify.service';\r\n\r\nexport const orderCreated = async (req: Request, res: Response) => {\r\n  try {\r\n    const orderData = req.body;\r\n    \r\n    // Process the incoming order data\r\n    await shopifyService.processNewOrder(orderData);\r\n    \r\n    // Return 200 OK to acknowledge receipt\r\n    res.status(200).send();\r\n  } catch (error: any) {\r\n    console.error('Error processing order created webhook:', error);\r\n    // Still return 200 to prevent Shopify from retrying\r\n    res.status(200).send();\r\n  }\r\n};\r\n\r\nexport const orderUpdated = async (req: Request, res: Response) => {\r\n  try {\r\n    const orderData = req.body;\r\n    \r\n    // Process the updated order data\r\n    await shopifyService.processOrderUpdate(orderData);\r\n    \r\n    res.status(200).send();\r\n  } catch (error: any) {\r\n    console.error('Error processing order updated webhook:', error);\r\n    res.status(200).send();\r\n  }\r\n};\r\n\r\nexport const productUpdated = async (req: Request, res: Response) => {\r\n  try {\r\n    const productData = req.body;\r\n    \r\n    // Process the updated product data\r\n    await shopifyService.processProductUpdate(productData);\r\n    \r\n    res.status(200).send();\r\n  } catch (error: any) {\r\n    console.error('Error processing product updated webhook:', error);\r\n    res.status(200).send();\r\n  }\r\n};\r\n\r\nexport const inventoryUpdated = async (req: Request, res: Response) => {\r\n  try {\r\n    const inventoryData = req.body;\r\n    \r\n    // Process the updated inventory data\r\n    await shopifyService.processInventoryUpdate(inventoryData);\r\n    \r\n    res.status(200).send();\r\n  } catch (error: any) {\r\n    console.error('Error processing inventory updated webhook:', error);\r\n    res.status(200).send();\r\n  }\r\n};\r\n","import { Request, Response, NextFunction } from 'express';\r\nimport crypto from 'crypto';\r\nimport { shopifyConfig } from '@/config/shopify.config';\r\n\r\nexport const validateShopifyWebhook = (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    // Get the HMAC header\r\n    const hmacHeader = req.header('X-Shopify-Hmac-Sha256');\r\n    \r\n    if (!hmacHeader) {\r\n      return res.status(401).json({ error: 'Missing HMAC header' });\r\n    }\r\n    \r\n    // Get the raw body as a string\r\n    const body = JSON.stringify(req.body);\r\n    \r\n    // Calculate the HMAC on our side\r\n    const calculatedHmac = crypto\r\n      .createHmac('sha256', shopifyConfig.apiSecret)\r\n      .update(body, 'utf8')\r\n      .digest('base64');\r\n    \r\n    // Compare our calculated HMAC with the one from Shopify\r\n    if (calculatedHmac !== hmacHeader) {\r\n      return res.status(401).json({ error: 'Invalid webhook signature' });\r\n    }\r\n    \r\n    // Validate the shop domain if available\r\n    const shopDomain = req.header('X-Shopify-Shop-Domain');\r\n    if (shopDomain && !shopDomain.includes(shopifyConfig.storeUrl)) {\r\n      return res.status(401).json({ error: 'Invalid shop domain' });\r\n    }\r\n    \r\n    // Verify webhook topic if needed\r\n    const topic = req.header('X-Shopify-Topic');\r\n    if (!topic) {\r\n      return res.status(400).json({ error: 'Missing webhook topic' });\r\n    }\r\n    \r\n    // If everything is valid, proceed\r\n    next();\r\n  } catch (error) {\r\n    console.error('Webhook validation error:', error);\r\n    res.status(500).json({ error: 'Failed to validate webhook' });\r\n  }\r\n};\r\n","import mongoose, { Document, Schema } from 'mongoose';\r\nimport bcrypt from 'bcrypt'\r\n\r\nexport enum EUserRole {\r\n    client = 'client',\r\n    admin = 'admin',\r\n    superAdmin = 'super_admin'\r\n}\r\n\r\nexport interface IUser extends Document {\r\n    email: string;\r\n    password: string;\r\n    role: EUserRole;\r\n    name: string;\r\n    address?: {\r\n        street?: string;\r\n        city?: string;\r\n        state?: string;\r\n        zip?: string;\r\n        country?: string;\r\n    }\r\n    phone?: string;\r\n    verified: boolean;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    comparePassword(candidatePassword: string): Promise<boolean>;\r\n    wishlisted: string[];\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        lowercase: true,\r\n        trim: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6\r\n    },\r\n    address: {\r\n        street: {\r\n            type: String,\r\n            trim: true,\r\n            required: false\r\n        },\r\n        city: {\r\n            type: String,\r\n            trim: true,\r\n            required: false\r\n        },\r\n        state: {\r\n            type: String,\r\n            trim: true,\r\n            required: false\r\n        },\r\n        zip: {\r\n            type: String,\r\n            trim: true,\r\n            required: false\r\n        },\r\n        country: {\r\n            type: String,\r\n            trim: true,\r\n            required: false\r\n        }\r\n    },\r\n    role: {\r\n        type: String,\r\n        enum: Object.values(EUserRole),\r\n        default: EUserRole.client\r\n    },\r\n    name: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    phone: {\r\n        type: String,\r\n        trim: true\r\n    },\r\n    verified: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    wishlisted: {\r\n        type: [String],\r\n        default: []\r\n    }\r\n}, { timestamps: true });\r\n\r\nUserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) return next();\r\n\r\n    try {\r\n        const salt = await bcrypt.genSalt(10);\r\n        this.password = await bcrypt.hash(this.password, salt);\r\n        next();\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n});\r\n\r\nUserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\r\n    return await bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\nexport default mongoose.model<IUser>('User', UserSchema);","import { Request, Response, NextFunction } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport User, { EUserRole } from \"@/models/user.model\";\r\n\r\ninterface DecodedToken {\r\n  id: string;\r\n  role: string;\r\n  email: string;\r\n  fingerprint: {\r\n    userAgent: string;\r\n    ip: string;\r\n  };\r\n  version: number;\r\n  iat: number;\r\n  exp: number;\r\n}\r\n\r\nexport const validateUserAccess = async (\r\n  req: any,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // Get token from cookie or header\r\n    let token =\r\n      req.cookies.token || req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\r\n\r\n    if (!token) {\r\n      return res.status(401).json({ error: \"Not authenticated\" });\r\n    }\r\n\r\n    const decoded = jwt.verify(\r\n      token,\r\n      process.env.JWT_SECRET || \"your-secret-key\"\r\n    ) as DecodedToken;\r\n\r\n    // Fetch the user from database to get the complete user object\r\n    const user = await User.findById(decoded.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: \"User not found\" });\r\n    }\r\n\r\n    // Check if the user is verified\r\n    if (!user.verified) {\r\n      return res.status(403).json({ error: \"User not verified\" });\r\n    }\r\n\r\n    // Attach user to request object\r\n    req.user = user;\r\n\r\n    next();\r\n  } catch (error: any) {\r\n    if (error.name === \"TokenExpiredError\") {\r\n      return res.status(401).json({ error: \"Token expired\" });\r\n    }\r\n\r\n    res.status(400).json({ error: \"Invalid token\" });\r\n  }\r\n};\r\n\r\nexport const validateAdminAccess = async (\r\n  req: any,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // Get token from cookie or header\r\n    let token =\r\n      req.cookies.token || req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\r\n\r\n    if (!token) {\r\n      return res.status(401).json({ error: \"Not authenticated\" });\r\n    }\r\n\r\n    const decoded = jwt.verify(\r\n      token,\r\n      process.env.JWT_SECRET || \"your-secret-key\"\r\n    ) as DecodedToken;\r\n\r\n    // Fetch the user from database to get the complete user object\r\n    const user = await User.findById(decoded.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: \"User not found\" });\r\n    }\r\n\r\n    // Check if the user has admin role\r\n    if (user.role !== EUserRole.admin && user.role !== EUserRole.superAdmin) {\r\n      return res.status(403).json({ error: \"Access denied\" });\r\n    }\r\n\r\n    // Attach user to request object\r\n    req.user = user;\r\n\r\n    next();\r\n  } catch (error: any) {\r\n    if (error.name === \"TokenExpiredError\") {\r\n      return res.status(401).json({ error: \"Token expired\" });\r\n    }\r\n    res.status(400).json({ error: \"Invalid token\" });\r\n  }\r\n};\r\n\r\nexport const validateSuperAdminAccess = async (\r\n  req: any,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    // Get token from cookie or header\r\n    let token =\r\n      req.cookies.token || req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\r\n\r\n    if (!token) {\r\n      return res.status(401).json({ error: \"Not authenticated\" });\r\n    }\r\n\r\n    const decoded = jwt.verify(\r\n      token,\r\n      process.env.JWT_SECRET || \"your-secret-key\"\r\n    ) as DecodedToken;\r\n\r\n    // Fetch the user from database to get the complete user object\r\n    const user = await User.findById(decoded.id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ error: \"User not found\" });\r\n    }\r\n\r\n    // Check if the user has super admin role\r\n    if (user.role !== EUserRole.superAdmin) {\r\n      return res.status(403).json({ error: \"Super admin access required\" });\r\n    }\r\n\r\n    // Attach user to request object\r\n    req.user = user;\r\n\r\n    next();\r\n  } catch (error: any) {\r\n    if (error.name === \"TokenExpiredError\") {\r\n      return res.status(401).json({ error: \"Token expired\" });\r\n    }\r\n    res.status(400).json({ error: \"Invalid token\" });\r\n  }\r\n};\r\n","import { Router } from \"express\";\r\nimport * as shopifyController from \"@/controllers/shopify.controller\";\r\nimport * as webhookController from \"@/controllers/webhook.controller\";\r\nimport { validateShopifyWebhook } from \"@/middleware/validateWebhook.middleware\";\r\nimport { validateAdminAccess } from \"@/middleware/auth.middleware\";\r\n\r\nconst shopifyRouter = Router();\r\n\r\n// Authentication\r\nshopifyRouter.post(\"/auth/callback\", shopifyController.handleAuthCallback);\r\nshopifyRouter.get(\"/auth/status\", shopifyController.checkAuthStatus);\r\n\r\n// Products\r\nshopifyRouter.get(\"/products\", shopifyController.getProducts);\r\nshopifyRouter.get(\"/products/:id\", shopifyController.getProduct);\r\nshopifyRouter.get(\r\n  \"/products/handle/:handle\",\r\n  shopifyController.getProductByHandle\r\n); // Add this line\r\nshopifyRouter.post(\r\n  \"/products\",\r\n  validateAdminAccess,\r\n  shopifyController.createProduct\r\n);\r\nshopifyRouter.put(\r\n  \"/products/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.updateProduct\r\n);\r\nshopifyRouter.delete(\r\n  \"/products/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.deleteProduct\r\n);\r\nshopifyRouter.get(\r\n  \"/products/:id/variants\",\r\n  shopifyController.getProductVariants\r\n);\r\n\r\n// Orders\r\nshopifyRouter.get(\"/orders\", shopifyController.getOrders);\r\nshopifyRouter.get(\"/orders/:id\", shopifyController.getOrder);\r\nshopifyRouter.post(\r\n  \"/orders\",\r\n  // validateAdminAccess,\r\n  shopifyController.createOrder\r\n);\r\nshopifyRouter.put(\r\n  \"/orders/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.updateOrder\r\n);\r\nshopifyRouter.get(\r\n  \"/orders/status/:status\",\r\n  shopifyController.getOrdersByStatus\r\n);\r\nshopifyRouter.post(\r\n  \"/orders/:id/fulfill\",\r\n  validateAdminAccess,\r\n  shopifyController.fulfillOrder\r\n);\r\nshopifyRouter.post(\r\n  \"/orders/:id/cancel\",\r\n  validateAdminAccess,\r\n  shopifyController.cancelOrder\r\n);\r\n\r\n// Customers\r\nshopifyRouter.get(\"/customers\", shopifyController.getCustomers);\r\nshopifyRouter.get(\"/customers/:id\", shopifyController.getCustomer);\r\nshopifyRouter.post(\r\n  \"/customers\",\r\n  validateAdminAccess,\r\n  shopifyController.createCustomer\r\n);\r\nshopifyRouter.put(\r\n  \"/customers/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.updateCustomer\r\n);\r\nshopifyRouter.get(\"/customers/:id/orders\", shopifyController.getCustomerOrders);\r\nshopifyRouter.get(\"/customers/search\", shopifyController.searchCustomers);\r\n\r\n// Inventory\r\nshopifyRouter.get(\"/inventory\", shopifyController.getInventoryLevels);\r\nshopifyRouter.post(\r\n  \"/inventory/adjust\",\r\n  validateAdminAccess,\r\n  shopifyController.adjustInventory\r\n);\r\nshopifyRouter.get(\r\n  \"/inventory/locations\",\r\n  shopifyController.getInventoryLocations\r\n);\r\n\r\n// Collections\r\nshopifyRouter.get(\"/collections\", shopifyController.getCollections);\r\nshopifyRouter.get(\"/collections/:id\", shopifyController.getCollection);\r\nshopifyRouter.get(\r\n  \"/collections/handle/:handle\",\r\n  shopifyController.getCollectionByHandle\r\n);\r\nshopifyRouter.get(\r\n  \"/collections/:id/products\",\r\n  shopifyController.getCollectionProducts\r\n);\r\nshopifyRouter.post(\r\n  \"/collections\",\r\n  validateAdminAccess,\r\n  shopifyController.createCollection\r\n);\r\nshopifyRouter.put(\r\n  \"/collections/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.updateCollection\r\n);\r\n\r\n// Webhooks\r\nshopifyRouter.post(\r\n  \"/webhooks\",\r\n  validateAdminAccess,\r\n  shopifyController.registerWebhook\r\n);\r\nshopifyRouter.delete(\r\n  \"/webhooks/:id\",\r\n  validateAdminAccess,\r\n  shopifyController.removeWebhook\r\n);\r\nshopifyRouter.get(\r\n  \"/webhooks\",\r\n  validateAdminAccess,\r\n  shopifyController.listWebhooks\r\n);\r\n\r\n// Webhook endpoints (protect with validateShopifyWebhook middleware)\r\nshopifyRouter.post(\r\n  \"/webhook/order-created\",\r\n  validateShopifyWebhook,\r\n  webhookController.orderCreated\r\n);\r\nshopifyRouter.post(\r\n  \"/webhook/order-updated\",\r\n  validateShopifyWebhook,\r\n  webhookController.orderUpdated\r\n);\r\nshopifyRouter.post(\r\n  \"/webhook/product-updated\",\r\n  validateShopifyWebhook,\r\n  webhookController.productUpdated\r\n);\r\nshopifyRouter.post(\r\n  \"/webhook/inventory-updated\",\r\n  validateShopifyWebhook,\r\n  webhookController.inventoryUpdated\r\n);\r\n\r\n// Analytics and reports\r\nshopifyRouter.get(\r\n  \"/analytics/sales\",\r\n  validateAdminAccess,\r\n  shopifyController.getSalesAnalytics\r\n);\r\nshopifyRouter.get(\r\n  \"/analytics/customers\",\r\n  validateAdminAccess,\r\n  shopifyController.getCustomerAnalytics\r\n);\r\nshopifyRouter.get(\r\n  \"/analytics/products\",\r\n  validateAdminAccess,\r\n  shopifyController.getProductAnalytics\r\n);\r\nshopifyRouter.get(\r\n  \"/reports/sales\",\r\n  validateAdminAccess,\r\n  shopifyController.generateSalesReport\r\n);\r\n\r\nexport default shopifyRouter;\r\n","import { Request, Response } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport User, { EUserRole, IUser } from '@/models/user.model';\r\n\r\nconst sendTokenResponse = (user: IUser, statusCode: number, res: Response, req: Request) => {\r\n  // Get fingerprinting information\r\n  const userAgent = req.headers['user-agent'] || 'unknown';\r\n  const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\r\n  \r\n  // Create a more secure token with additional claims\r\n  const token = jwt.sign(\r\n    { \r\n      id: user._id,\r\n      role: user.role,\r\n      email: user.email,\r\n      fingerprint: {\r\n        userAgent: userAgent.substring(0, 100), // Limit length for security\r\n        ip: ipAddress\r\n      },\r\n      // Adding version number for future JWT structure changes\r\n      version: 1\r\n    },\r\n    process.env.JWT_SECRET || 'your-secret-key',\r\n    {\r\n      expiresIn: '24h', // Longer expiry time to prevent frequent auth issues\r\n    }\r\n  );\r\n\r\n  // Determine the correct cookie settings based on environment\r\n  const cookieOptions = {\r\n    expires: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\r\n    httpOnly: true,\r\n    secure: true, // Required for SameSite=None\r\n    sameSite: 'none' as const, // Allow cross-site cookies in both environments\r\n    path: '/', // Ensure cookie is sent for all paths\r\n  };\r\n\r\n  // Set cookie and send response with fields that match our user model\r\n  res\r\n    .status(statusCode)\r\n    .cookie('token', token, cookieOptions)\r\n    .json({\r\n      success: true,\r\n      token,\r\n      data: {\r\n        id: user._id,\r\n        _id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        role: user.role\r\n      },\r\n    });\r\n};\r\n\r\n// @desc    Register user\r\n// @route   POST /api/auth/register\r\nexport const register = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { name, email, password, phone } = req.body;\r\n\r\n    // Check if email already exists\r\n    const emailExists = await User.findOne({ email });\r\n    if (emailExists) {\r\n      res.status(400).json({ message: 'Email already registered' });\r\n      return;\r\n    }\r\n\r\n    // Check if phone already exists (if provided)\r\n    if (phone) {\r\n      const phoneExists = await User.findOne({ phone });\r\n      if (phoneExists) {\r\n        res.status(400).json({ message: 'Phone number already registered' });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Create user\r\n    const user = await User.create({\r\n      name,\r\n      email,\r\n      password,\r\n      ...(phone ? { phone } : {})\r\n    });\r\n\r\n    sendTokenResponse(user, 201, res, req);\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Registration failed', error: error.message });\r\n  }\r\n};\r\n\r\n// @desc    Login user\r\n// @route   POST /api/auth/login\r\nexport const login = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Validate email & password\r\n    if (!email || !password) {\r\n      res.status(400).json({ message: 'Please provide email and password' });\r\n      return;\r\n    }\r\n\r\n    // Check for user\r\n    const user = await User.findOne({ email }).select('+password');\r\n    \r\n    if (!user) {\r\n      res.status(401).json({ message: 'Invalid credentials' });\r\n      return;\r\n    }\r\n\r\n    // Check if password matches\r\n    try {\r\n      const isMatch = await user.comparePassword(password);\r\n      if (!isMatch) {\r\n        res.status(401).json({ message: 'Invalid credentials' });\r\n        return;\r\n      }\r\n      \r\n      sendTokenResponse(user, 200, res, req);\r\n    } catch (error) {\r\n      res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Login failed', error: error.message });\r\n  }\r\n};\r\n\r\n// @desc    Logout user / clear cookie\r\n// @route   GET /api/auth/logout\r\nexport const logout = (req: Request, res: Response): void => {\r\n  // Use the same secure cookie options when clearing (without expires)\r\n  const cookieOptions = {\r\n    httpOnly: true,\r\n    secure: true,\r\n    sameSite: 'none' as const,\r\n    path: '/'\r\n  };\r\n  \r\n  res.clearCookie('token', cookieOptions);\r\n  \r\n  res.status(200).json({ \r\n    success: true, \r\n    message: 'Logged out successfully' \r\n  });\r\n};\r\n\r\n// @desc    Get current logged in user\r\n// @route   GET /api/auth/me\r\nexport const getCurrentUser = async (req: any, res: Response): Promise<void> => {\r\n  try {\r\n    // Assume you have a middleware that attaches user to request\r\n    if (!req.user) {\r\n      res.status(401).json({ message: 'Not authenticated' });\r\n      return;\r\n    }\r\n    \r\n    // Only include fields from your user model\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        id: req.user._id,\r\n        _id: req.user._id,\r\n        name: req.user.name,\r\n        image: req.user.image || null,\r\n        email: req.user.email,\r\n        phone: req.user.phone,\r\n        role: req.user.role,\r\n        verified: req.user.verified,\r\n        address: req.user.address || null,\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Error retrieving user', error: error.message });\r\n  }\r\n};\r\n\r\n// @desc    Refresh token while maintaining user session\r\n// @route   GET /api/auth/refresh-token\r\nexport const refreshToken = async (req: any, res: Response): Promise<void> => {\r\n  try {\r\n    if (!req.user) {\r\n      res.status(401).json({ message: 'Not authenticated' });\r\n      return;\r\n    }\r\n    \r\n    // Create a new token with a fresh expiry\r\n    sendTokenResponse(req.user, 200, res, req);\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Token refresh failed', error: error.message });\r\n  }\r\n};\r\n\r\n// @desc    Update user profile\r\n// @route   PUT /api/auth/update-profile\r\nexport const updateProfile = async (req: any, res: Response): Promise<void> => {\r\n  try {\r\n    if (!req.user) {\r\n      res.status(401).json({ message: 'Not authenticated' });\r\n      return;\r\n    }\r\n\r\n    const { name, phone } = req.body;\r\n    const updateData: Partial<IUser> = {};\r\n\r\n    // Only update fields that are provided\r\n    if (name) updateData.name = name;\r\n    if (phone) updateData.phone = phone;\r\n\r\n    // Update user by ID\r\n    const user = await User.findByIdAndUpdate(\r\n      req.user._id,\r\n      updateData,\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    if (!user) {\r\n      res.status(404).json({ message: 'User not found' });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        id: user._id,\r\n        _id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        role: user.role\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Profile update failed', error: error.message });\r\n  }\r\n};\r\n\r\n// @desc    Change password\r\n// @route   PUT /api/auth/change-password\r\nexport const changePassword = async (req: any, res: Response): Promise<void> => {\r\n  try {\r\n    if (!req.user) {\r\n      res.status(401).json({ message: 'Not authenticated' });\r\n      return;\r\n    }\r\n\r\n    const { currentPassword, newPassword } = req.body;\r\n\r\n    if (!currentPassword || !newPassword) {\r\n      res.status(400).json({ message: 'Please provide both current and new password' });\r\n      return;\r\n    }\r\n\r\n    // Get user with password\r\n    const user = await User.findById(req.user._id).select('+password');\r\n\r\n    if (!user) {\r\n      res.status(404).json({ message: 'User not found' });\r\n      return;\r\n    }\r\n\r\n    // Verify current password\r\n    const isMatch = await user.comparePassword(currentPassword);\r\n    if (!isMatch) {\r\n      res.status(401).json({ message: 'Current password is incorrect' });\r\n      return;\r\n    }\r\n\r\n    // Update password\r\n    user.password = newPassword;\r\n    await user.save();\r\n\r\n    sendTokenResponse(user, 200, res, req);\r\n  } catch (error: any) {\r\n    res.status(500).json({ message: 'Password change failed', error: error.message });\r\n  }\r\n};\r\n","import express from 'express';\r\nimport {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  refreshToken,\r\n  updateProfile,\r\n  changePassword\r\n} from '@/controllers/auth.controller';\r\nimport { validateUserAccess } from '@/middleware/auth.middleware';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/register', register);\r\nrouter.post('/login', login);\r\nrouter.get('/logout', logout);\r\nrouter.get('/me', validateUserAccess, getCurrentUser);\r\nrouter.get('/refresh-token', validateUserAccess, refreshToken);\r\nrouter.put('/update-profile', validateUserAccess, updateProfile);\r\nrouter.put('/change-password', validateUserAccess, changePassword);\r\n\r\nexport default router;\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IPage extends Document {\r\n  name: string;\r\n  path: string;\r\n  data: Record<string, any>; // Can store literally anything\r\n  updatedBy: mongoose.Types.ObjectId;\r\n  createdBy: mongoose.Types.ObjectId;\r\n  isActive: boolean;\r\n  version: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst PageSchema = new Schema<IPage>(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    path: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n      trim: true,\r\n    },\r\n    data: {\r\n      type: Schema.Types.Mixed,\r\n      default: {},\r\n    },\r\n    updatedBy: {\r\n      type: Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\",\r\n    },\r\n    createdBy: {\r\n      type: Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\",\r\n    },\r\n    isActive: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    version: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nexport const Page = mongoose.model<IPage>(\"Page\", PageSchema);\r\n","import { v2 as cloudinary } from \"cloudinary\";\r\nimport { CloudinaryStorage } from \"multer-storage-cloudinary\";\r\nimport multer from \"multer\";\r\n\r\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || \"\",\r\n  api_key: process.env.CLOUDINARY_API_KEY || \"\",\r\n  api_secret: process.env.CLOUDINARY_API_SECRET || \"\",\r\n});\r\n\r\n// Homepage images storage configuration\r\nconst homepageStorage = new CloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  params: {\r\n    folder: \"shopify-ui/homepage\",\r\n    allowed_formats: [\r\n      \"jpg\",\r\n      \"jpeg\",\r\n      \"png\",\r\n      \"gif\",\r\n      \"webp\"\r\n    ],\r\n    resource_type: \"image\",\r\n    public_id: (req: any, file: any) => {\r\n      const filename = `${Date.now()}-${file.originalname.replace(\r\n        /\\s+/g,\r\n        \"-\"\r\n      )}`;\r\n      return filename;\r\n    },\r\n    access_mode: \"public\",\r\n    transformation: [\r\n      { quality: \"auto:good\" },\r\n      { fetch_format: \"auto\" },\r\n    ],\r\n  } as any,\r\n});\r\n\r\nconst homepageUploadMiddleware = multer({\r\n  storage: homepageStorage,\r\n  limits: {\r\n    fileSize: MAX_FILE_SIZE,\r\n  },\r\n  fileFilter: (req, file, callback) => {\r\n    // Only allow image files\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error(\"Only image files are allowed\"));\r\n    }\r\n  },\r\n});\r\n\r\n// Testimonial images storage configuration\r\nconst testimonialStorage = new CloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  params: {\r\n    folder: \"shopify-ui/testimonials\",\r\n    allowed_formats: [\r\n      \"jpg\",\r\n      \"jpeg\",\r\n      \"png\",\r\n      \"gif\",\r\n      \"webp\"\r\n    ],\r\n    resource_type: \"image\",\r\n    public_id: (req: any, file: any) => {\r\n      const filename = `${Date.now()}-${file.originalname.replace(\r\n        /\\s+/g,\r\n        \"-\"\r\n      )}`;\r\n      return filename;\r\n    },\r\n    access_mode: \"public\",\r\n    transformation: [\r\n      { quality: \"auto:good\" },\r\n      { fetch_format: \"auto\" },\r\n      { width: 400, height: 400, crop: \"fill\" }, // Square format for testimonial avatars\r\n    ],\r\n  } as any,\r\n});\r\n\r\nconst testimonialUploadMiddleware = multer({\r\n  storage: testimonialStorage,\r\n  limits: {\r\n    fileSize: MAX_FILE_SIZE,\r\n  },\r\n  fileFilter: (req, file, callback) => {\r\n    // Only allow image files\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error(\"Only image files are allowed\"));\r\n    }\r\n  },\r\n});\r\n\r\n// Review images storage configuration\r\nconst reviewStorage = new CloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  params: {\r\n    folder: \"shopify-ui/reviews\",\r\n    allowed_formats: [\r\n      \"jpg\",\r\n      \"jpeg\",\r\n      \"png\",\r\n      \"gif\",\r\n      \"webp\"\r\n    ],\r\n    resource_type: \"image\",\r\n    public_id: (req: any, file: any) => {\r\n      const filename = `${Date.now()}-${file.originalname.replace(\r\n        /\\s+/g,\r\n        \"-\"\r\n      )}`;\r\n      return filename;\r\n    },\r\n    access_mode: \"public\",\r\n    transformation: [\r\n      { quality: \"auto:good\" },\r\n      { fetch_format: \"auto\" },\r\n      { width: 800, height: 600, crop: \"limit\" }, // Limit size for review images\r\n    ],\r\n  } as any,\r\n});\r\n\r\nconst reviewUploadMiddleware = multer({\r\n  storage: reviewStorage,\r\n  limits: {\r\n    fileSize: MAX_FILE_SIZE,\r\n  },\r\n  fileFilter: (req, file, callback) => {\r\n    // Only allow image files\r\n    if (file.mimetype.startsWith(\"image/\")) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error(\"Only image files are allowed\"));\r\n    }\r\n  },\r\n});\r\n\r\n// Legal documents storage configuration\r\nconst legalDocumentStorage = new CloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  params: {\r\n    folder: \"shopify-ui/legal-documents\",\r\n    resource_type: \"raw\", // Use 'raw' for non-image files\r\n    public_id: (req: any, file: any) => {\r\n      const filename = `${Date.now()}-${file.originalname.replace(\r\n        /\\s+/g,\r\n        \"-\"\r\n      )}`;\r\n      return filename;\r\n    },\r\n    access_mode: \"public\",\r\n    // Remove allowed_formats for raw files - Cloudinary doesn't use this for raw uploads\r\n  } as any,\r\n});\r\n\r\nconst legalDocumentUploadMiddleware = multer({\r\n  storage: legalDocumentStorage,\r\n  limits: {\r\n    fileSize: MAX_FILE_SIZE,\r\n  },\r\n  fileFilter: (req, file, callback) => {\r\n    // Allow document files - be more permissive with markdown files\r\n    const allowedMimeTypes = [\r\n      \"text/markdown\",\r\n      \"text/plain\",\r\n      \"application/pdf\",\r\n      \"application/msword\",\r\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n      \"application/octet-stream\" // Some browsers send .md files as this\r\n    ];\r\n    \r\n    // Check by file extension for markdown files\r\n    const isMarkdownFile = file.originalname.toLowerCase().endsWith('.md');\r\n    const isMimeTypeAllowed = allowedMimeTypes.includes(file.mimetype);\r\n    \r\n    if (isMarkdownFile || isMimeTypeAllowed) {\r\n      callback(null, true);\r\n    } else {\r\n      callback(new Error(\"Only document files (MD, TXT, PDF, DOC, DOCX) are allowed\"));\r\n    }\r\n  },\r\n});\r\n\r\n// Homepage image uploads with multiple fields support\r\nexport const upload = {\r\n  homepage: {\r\n    single: (fieldName: string) => homepageUploadMiddleware.single(fieldName),\r\n    array: (fieldName: string, maxCount: number = 10) => {\r\n      return (req: any, res: any, next: any) => {\r\n        homepageUploadMiddleware.array(fieldName, maxCount)(\r\n          req,\r\n          res,\r\n          (err: any) => {\r\n            if (err) {\r\n              if (err.code === \"LIMIT_FILE_SIZE\") {\r\n                return res.status(413).json({\r\n                  success: false,\r\n                  message: `File size too large. Maximum allowed size is ${\r\n                    MAX_FILE_SIZE / 1024 / 1024\r\n                  }MB.`,\r\n                  error: \"FILE_TOO_LARGE\",\r\n                });\r\n              }\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: err.message,\r\n                error: \"UPLOAD_ERROR\",\r\n              });\r\n            }\r\n            next();\r\n          }\r\n        );\r\n      };\r\n    },\r\n    any: () => {\r\n      return (req: any, res: any, next: any) => {\r\n        homepageUploadMiddleware.any()(req, res, (err: any) => {\r\n          if (err) {\r\n            if (err.code === \"LIMIT_FILE_SIZE\") {\r\n              return res.status(413).json({\r\n                success: false,\r\n                message: `File size too large. Maximum allowed size is ${\r\n                  MAX_FILE_SIZE / 1024 / 1024\r\n                }MB.`,\r\n                error: \"FILE_TOO_LARGE\",\r\n              });\r\n            }\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: err.message,\r\n              error: \"UPLOAD_ERROR\",\r\n            });\r\n          }\r\n          next();\r\n        });\r\n      };\r\n    },\r\n    fields: (fields: { name: string; maxCount?: number }[]) => {\r\n      return (req: any, res: any, next: any) => {\r\n        homepageUploadMiddleware.fields(fields)(req, res, (err: any) => {\r\n          if (err) {\r\n            if (err.code === \"LIMIT_FILE_SIZE\") {\r\n              return res.status(413).json({\r\n                success: false,\r\n                message: `File size too large. Maximum allowed size is ${\r\n                  MAX_FILE_SIZE / 1024 / 1024\r\n                }MB.`,\r\n                error: \"FILE_TOO_LARGE\",\r\n              });\r\n            }\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: err.message,\r\n              error: \"UPLOAD_ERROR\",\r\n            });\r\n          }\r\n          next();\r\n        });\r\n      };\r\n    },\r\n    optional: (fieldName: string) => (req: any, res: any, next: any) => {\r\n      if (!req.file && (!req.files || Object.keys(req.files).length === 0)) {\r\n        return next();\r\n      }\r\n\r\n      homepageUploadMiddleware.single(fieldName)(req, res, (err: any) => {\r\n        if (err) {\r\n          return res.status(400).json({ message: err.message });\r\n        }\r\n        next();\r\n      });\r\n    },\r\n  },\r\n  testimonial: {\r\n    single: (fieldName: string) => testimonialUploadMiddleware.single(fieldName),\r\n    array: (fieldName: string, maxCount: number = 10) => {\r\n      return (req: any, res: any, next: any) => {\r\n        testimonialUploadMiddleware.array(fieldName, maxCount)(\r\n          req,\r\n          res,\r\n          (err: any) => {\r\n            if (err) {\r\n              if (err.code === \"LIMIT_FILE_SIZE\") {\r\n                return res.status(413).json({\r\n                  success: false,\r\n                  message: `File size too large. Maximum allowed size is ${\r\n                    MAX_FILE_SIZE / 1024 / 1024\r\n                  }MB.`,\r\n                  error: \"FILE_TOO_LARGE\",\r\n                });\r\n              }\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: err.message,\r\n                error: \"UPLOAD_ERROR\",\r\n              });\r\n            }\r\n            next();\r\n          }\r\n        );\r\n      };\r\n    },\r\n  },\r\n  review: {\r\n    single: (fieldName: string) => reviewUploadMiddleware.single(fieldName),\r\n    array: (fieldName: string, maxCount: number = 5) => {\r\n      return (req: any, res: any, next: any) => {\r\n        reviewUploadMiddleware.array(fieldName, maxCount)(\r\n          req,\r\n          res,\r\n          (err: any) => {\r\n            if (err) {\r\n              if (err.code === \"LIMIT_FILE_SIZE\") {\r\n                return res.status(413).json({\r\n                  success: false,\r\n                  message: `File size too large. Maximum allowed size is ${\r\n                    MAX_FILE_SIZE / 1024 / 1024\r\n                  }MB.`,\r\n                  error: \"FILE_TOO_LARGE\",\r\n                });\r\n              }\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: err.message,\r\n                error: \"UPLOAD_ERROR\",\r\n              });\r\n            }\r\n            next();\r\n          }\r\n        );\r\n      };\r\n    },\r\n  },\r\n  legalDocument: {\r\n    single: (fieldName: string) => legalDocumentUploadMiddleware.single(fieldName),\r\n    array: (fieldName: string, maxCount: number = 5) => {\r\n      return (req: any, res: any, next: any) => {\r\n        legalDocumentUploadMiddleware.array(fieldName, maxCount)(\r\n          req,\r\n          res,\r\n          (err: any) => {\r\n            if (err) {\r\n              if (err.code === \"LIMIT_FILE_SIZE\") {\r\n                return res.status(413).json({\r\n                  success: false,\r\n                  message: `File size too large. Maximum allowed size is ${\r\n                    MAX_FILE_SIZE / 1024 / 1024\r\n                  }MB.`,\r\n                  error: \"FILE_TOO_LARGE\",\r\n                });\r\n              }\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: err.message,\r\n                error: \"UPLOAD_ERROR\",\r\n              });\r\n            }\r\n            next();\r\n          }\r\n        );\r\n      };\r\n    },\r\n    optional: (fieldName: string) => (req: any, res: any, next: any) => {\r\n      if (!req.file && (!req.files || Object.keys(req.files).length === 0)) {\r\n        return next();\r\n      }\r\n\r\n      legalDocumentUploadMiddleware.single(fieldName)(req, res, (err: any) => {\r\n        if (err) {\r\n          return res.status(400).json({ \r\n            success: false,\r\n            message: err.message \r\n          });\r\n        }\r\n        next();\r\n      });\r\n    },\r\n  },\r\n};\r\n\r\n// For backward compatibility\r\nexport const single = (fieldName: string) =>\r\n  homepageUploadMiddleware.single(fieldName);\r\nexport const array = (fieldName: string, maxCount: number = 10) =>\r\n  homepageUploadMiddleware.array(fieldName, maxCount);\r\n\r\nexport const deleteImage = async (publicId: string) => {\r\n  try {\r\n    await cloudinary.uploader.destroy(publicId);\r\n  } catch (error) {\r\n    // Error handling without logging\r\n  }\r\n};\r\n\r\nexport const getPublicIdFromUrl = (url: string) => {\r\n  const splits = url.split(\"/\");\r\n  const filename = splits[splits.length - 1] || \"\";\r\n  \r\n  // Determine folder based on URL path\r\n  let folderPath = \"shopify-ui/homepage/\";\r\n  if (url.includes(\"/testimonials/\")) {\r\n    folderPath = \"shopify-ui/testimonials/\";\r\n  } else if (url.includes(\"/legal-documents/\")) {\r\n    folderPath = \"shopify-ui/legal-documents/\";\r\n  } else if (url.includes(\"/reviews/\")) {\r\n    folderPath = \"shopify-ui/reviews/\";\r\n  }\r\n  \r\n  return `${folderPath}${filename.split(\".\")[0]}`;\r\n};\r\n","import { IHomepageData } from '@/types/homepage.types';\r\nimport { deleteImage, getPublicIdFromUrl } from '@/utils/cloudinary';\r\n\r\n// Handle homepage image uploads\r\nexport const handleHomepageImageUploads = async (\r\n  data: IHomepageData,\r\n  files: any,\r\n  oldData?: any\r\n): Promise<IHomepageData> => {\r\n  const updatedData = { ...data };\r\n\r\n  // Convert files array to object for easier access\r\n  const filesMap: Record<string, any> = {};\r\n  if (Array.isArray(files)) {\r\n    files.forEach((file: any) => {\r\n      if (!filesMap[file.fieldname]) {\r\n        filesMap[file.fieldname] = [];\r\n      }\r\n      filesMap[file.fieldname].push(file);\r\n    });\r\n  } else {\r\n    Object.assign(filesMap, files);\r\n  }\r\n\r\n  // Handle hero slides images\r\n  if (updatedData.hero?.slides) {\r\n    for (let i = 0; i < updatedData.hero.slides.length; i++) {\r\n      const fieldName = `hero_slide_${i}`;\r\n      if (filesMap[fieldName] && filesMap[fieldName][0]) {\r\n        // Delete old image if exists\r\n        if (oldData?.hero?.slides?.[i]?.imageUrl) {\r\n          const oldPublicId = getPublicIdFromUrl(oldData.hero.slides[i].imageUrl);\r\n          await deleteImage(oldPublicId);\r\n        }\r\n        // Use the correct property for Cloudinary URL\r\n        const imageUrl = filesMap[fieldName][0].path || filesMap[fieldName][0].location || filesMap[fieldName][0].secure_url;\r\n        updatedData.hero.slides[i].imageUrl = imageUrl;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handle fashion banners images\r\n  if (updatedData.fashion?.banners) {\r\n    for (let i = 0; i < updatedData.fashion.banners.length; i++) {\r\n      const fieldName = `fashion_banner_${i}`;\r\n      if (filesMap[fieldName] && filesMap[fieldName][0]) {\r\n        // Delete old image if exists\r\n        if (oldData?.fashion?.banners?.[i]?.imageUrl) {\r\n          const oldPublicId = getPublicIdFromUrl(oldData.fashion.banners[i].imageUrl);\r\n          await deleteImage(oldPublicId);\r\n        }\r\n        // Use the correct property for Cloudinary URL\r\n        const imageUrl = filesMap[fieldName][0].path || filesMap[fieldName][0].location || filesMap[fieldName][0].secure_url;\r\n        updatedData.fashion.banners[i].imageUrl = imageUrl;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handle banner images\r\n  for (let i = 0; i < (updatedData.banners?.length || 0); i++) {\r\n    const fieldName = `banner_${i}`;\r\n    if (filesMap[fieldName] && filesMap[fieldName][0] && updatedData.banners[i]) {\r\n      if (oldData?.banners?.[i]?.imageUrl) {\r\n        const oldPublicId = getPublicIdFromUrl(oldData.banners[i].imageUrl);\r\n        await deleteImage(oldPublicId);\r\n      }\r\n      // Use the correct property for Cloudinary URL\r\n      const imageUrl = filesMap[fieldName][0].path || filesMap[fieldName][0].location || filesMap[fieldName][0].secure_url;\r\n      updatedData.banners[i].imageUrl = imageUrl;\r\n    }\r\n  }\r\n  return updatedData;\r\n};\r\n\r\n// Delete homepage images\r\nexport const deleteHomepageImages = async (data: IHomepageData): Promise<void> => {\r\n  try {\r\n    // Delete hero slides images\r\n    if (data.hero?.slides) {\r\n      for (const slide of data.hero.slides) {\r\n        if (slide.imageUrl) {\r\n          const publicId = getPublicIdFromUrl(slide.imageUrl);\r\n          await deleteImage(publicId);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Delete fashion banners images\r\n    if (data.fashion?.banners) {\r\n      for (const banner of data.fashion.banners) {\r\n        if (banner.imageUrl) {\r\n          const publicId = getPublicIdFromUrl(banner.imageUrl);\r\n          await deleteImage(publicId);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Delete banner images\r\n    if (data.banners) {\r\n      for (const banner of data.banners) {\r\n        if (banner.imageUrl) {\r\n          const publicId = getPublicIdFromUrl(banner.imageUrl);\r\n          await deleteImage(publicId);\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting homepage images:', error);\r\n  }\r\n};\r\n","import { upload, deleteImage, getPublicIdFromUrl } from '@/utils/cloudinary';\r\n\r\n// Generic image upload handler\r\nexport const handleSingleImageUpload = async (\r\n  req: any,\r\n  currentImageUrl?: string\r\n): Promise<string> => {\r\n  if (!req.file) {\r\n    throw new Error('No image file provided');\r\n  }\r\n\r\n  // Delete old image if exists\r\n  if (currentImageUrl) {\r\n    const oldPublicId = getPublicIdFromUrl(currentImageUrl);\r\n    await deleteImage(oldPublicId);\r\n  }\r\n\r\n  // Return new image URL\r\n  return req.file.path || req.file.location || req.file.secure_url || '';\r\n};\r\n\r\n// Optional image upload handler (supports single or multiple images)\r\nexport const handleOptionalImageUpload = async (\r\n  req: any,\r\n  currentImageUrl?: string | string[],\r\n  multiple: boolean = false\r\n): Promise<string | string[] | undefined> => {\r\n  if (multiple) {\r\n    // Handle multiple images\r\n    if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    // Delete old images if exists and we're replacing them\r\n    if (currentImageUrl && Array.isArray(currentImageUrl)) {\r\n      for (const imageUrl of currentImageUrl) {\r\n        const oldPublicId = getPublicIdFromUrl(imageUrl);\r\n        await deleteImage(oldPublicId);\r\n      }\r\n    }\r\n\r\n    // Return new image URLs\r\n    return req.files.map((file: any) => file.path || file.location || file.secure_url || '');\r\n  } else {\r\n    // Handle single image\r\n    if (!req.file) {\r\n      return undefined;\r\n    }\r\n\r\n    // Delete old image if exists and we're replacing it\r\n    if (currentImageUrl && typeof currentImageUrl === 'string') {\r\n      const oldPublicId = getPublicIdFromUrl(currentImageUrl);\r\n      await deleteImage(oldPublicId);\r\n    }\r\n\r\n    // Return new image URL\r\n    return req.file.path || req.file.location || req.file.secure_url || '';\r\n  }\r\n};\r\n\r\n// Delete image helper\r\nexport const deleteImageFromUrl = async (imageUrl?: string): Promise<void> => {\r\n  if (imageUrl) {\r\n    const publicId = getPublicIdFromUrl(imageUrl);\r\n    await deleteImage(publicId);\r\n  }\r\n};\r\n\r\n// Get upload middleware for testimonials (optional)\r\nexport const getTestimonialUploadMiddleware = () => {\r\n  return (req: any, res: any, next: any) => {\r\n    const singleUpload = upload.testimonial.single('image');\r\n\r\n    // Use optional upload - don't fail if no file\r\n    singleUpload(req, res, (err: any) => {\r\n      // Only pass errors that aren't \"no file\" errors\r\n      if (err && err.code !== 'LIMIT_UNEXPECTED_FILE') {\r\n        return next(err);\r\n      }\r\n      // Continue even if no file was uploaded\r\n      next();\r\n    });\r\n  };\r\n};\r\n\r\n// Get upload middleware for reviews (supports multiple images)\r\nexport const getReviewUploadMiddleware = () => {\r\n  return (req: any, res: any, next: any) => {\r\n    const multipleUpload = upload.review.array('images', 5); // Allow up to 5 images\r\n\r\n    // Use optional upload - don't fail if no file\r\n    multipleUpload(req, res, (err: any) => {\r\n      // Only pass errors that aren't \"no file\" errors\r\n      if (err && err.code !== 'LIMIT_UNEXPECTED_FILE') {\r\n        return next(err);\r\n      }\r\n      // Continue even if no files were uploaded\r\n      next();\r\n    });\r\n  };\r\n};\r\n\r\n// Get upload middleware for homepage\r\nexport const getHomepageUploadMiddleware = () => {\r\n  return upload.homepage.any();\r\n};\r\n","import { Request, Response } from 'express';\r\nimport { Page } from '@/models/page.model';\r\nimport { IHomepageData } from '@/types/homepage.types';\r\nimport { \r\n  handleHomepageImageUploads, \r\n  deleteHomepageImages \r\n} from '@/utils/homepage.helpers';\r\nimport { getHomepageUploadMiddleware } from '@/utils/imageUpload.helpers';\r\nimport { upload } from '@/utils/cloudinary';\r\nimport fs from 'fs';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Create a new page\r\nexport const createPage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { name, path, data } = req.body;\r\n    const userId = (req as any).user?.id;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    const newPage = new Page({\r\n      name,\r\n      path,\r\n      data,\r\n      createdBy: userId,\r\n      updatedBy: userId\r\n    });\r\n\r\n    const savedPage = await newPage.save();\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Page created successfully',\r\n      data: savedPage\r\n    });\r\n  } catch (error: any) {\r\n    if (error.code === 11000) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Page with this path already exists'\r\n      });\r\n    }\r\n    \r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get all pages\r\nexport const getAllPages = async (req: Request, res: Response) => {\r\n  try {\r\n    const { isActive, page = 1, limit = 10 } = req.query;\r\n    \r\n    const filter: any = {};\r\n    if (isActive !== undefined) {\r\n      filter.isActive = isActive === 'true';\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const pages = await Page.find(filter)\r\n      .populate('createdBy updatedBy', 'name email')\r\n      .sort({ updatedAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Page.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        pages,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching pages',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get page by ID or path\r\nexport const getPage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { identifier } = req.params;\r\n    \r\n    const page = await Page.findOne({\r\n      $or: [\r\n        { _id: identifier },\r\n        { path: identifier }\r\n      ]\r\n    }).populate('createdBy updatedBy', 'name email');\r\n\r\n    if (!page) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Page not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: page\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Update page with image upload handling\r\nexport const updatePage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    let { name, path, data, isActive } = req.body;\r\n    const userId = (req as any).user?.id;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    const page = await Page.findById(id);\r\n    if (!page) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Page not found'\r\n      });\r\n    }\r\n\r\n    // Parse JSON data if it's a string\r\n    if (typeof data === 'string') {\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (parseError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Invalid JSON data format'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Handle image uploads using helper\r\n    let updatedData = data;\r\n    if (data && req.files) {\r\n      updatedData = await handleHomepageImageUploads(data as IHomepageData, req.files as any, page.data);\r\n    }\r\n\r\n    const updateFields: any = {\r\n      updatedBy: userId,\r\n      version: page.version + 1\r\n    };\r\n\r\n    if (name !== undefined) updateFields.name = name;\r\n    if (path !== undefined) updateFields.path = path;\r\n    if (updatedData !== undefined) updateFields.data = updatedData;\r\n    if (isActive !== undefined) updateFields.isActive = isActive;\r\n\r\n    const updatedPage = await Page.findByIdAndUpdate(\r\n      id,\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    ).populate('createdBy updatedBy', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Page updated successfully',\r\n      data: updatedPage\r\n    });\r\n  } catch (error: any) {\r\n    if (error.code === 11000) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Page with this path already exists'\r\n      });\r\n    }\r\n    \r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete page\r\nexport const deletePage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const page = await Page.findById(id);\r\n    if (!page) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Page not found'\r\n      });\r\n    }\r\n\r\n    // Delete associated images using helper\r\n    await deleteHomepageImages(page.data as IHomepageData);\r\n\r\n    await Page.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Page deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Homepage-specific CRUD operations\r\n\r\n// Get homepage (public route)\r\nexport const getHomepage = async (req: Request, res: Response) => {\r\n  try {\r\n    const homepage = await Page.findOne({ path: '/homepage' })\r\n      .populate('createdBy updatedBy', 'name email');\r\n\r\n    if (!homepage) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Homepage not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: homepage\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching homepage',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create homepage\r\nexport const createHomepage = async (req: Request, res: Response) => {\r\n  try {\r\n    let { data } = req.body;\r\n    const userId = (req as any).user?.id;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    // Check if homepage already exists\r\n    const existingHomepage = await Page.findOne({ path: '/homepage' });\r\n    if (existingHomepage) {\r\n      return res.status(409).json({\r\n        success: false,\r\n        message: 'Homepage already exists. Use update endpoint to modify it.'\r\n      });\r\n    }\r\n\r\n    // Parse JSON data if it's a string\r\n    if (typeof data === 'string') {\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (parseError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Invalid JSON data format'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Handle image uploads using helper\r\n    let homepageData = data;\r\n    if (data && req.files) {\r\n      homepageData = await handleHomepageImageUploads(data as IHomepageData, req.files as any);\r\n    }\r\n\r\n    const newHomepage = new Page({\r\n      name: 'Homepage',\r\n      path: '/homepage',\r\n      data: homepageData,\r\n      createdBy: userId,\r\n      updatedBy: userId\r\n    });\r\n\r\n    const savedHomepage = await newHomepage.save();\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Homepage created successfully',\r\n      data: savedHomepage\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating homepage',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Update homepage\r\nexport const updateHomepage = async (req: Request, res: Response) => {\r\n  try {\r\n    let { data, isActive } = req.body;\r\n    const userId = (req as any).user?.id;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    const homepage = await Page.findOne({ path: '/homepage' });\r\n    if (!homepage) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Homepage not found. Create it first.'\r\n      });\r\n    }\r\n\r\n    // Parse JSON data if it's a string\r\n    if (typeof data === 'string') {\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (parseError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Invalid JSON data format'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Handle image uploads using helper\r\n    let updatedData = data;\r\n    if (data && req.files) {\r\n      updatedData = await handleHomepageImageUploads(data as IHomepageData, req.files as any, homepage.data);\r\n    }\r\n\r\n    const updateFields: any = {\r\n      updatedBy: userId,\r\n      version: homepage.version + 1\r\n    };\r\n\r\n    if (updatedData !== undefined) updateFields.data = updatedData;\r\n    if (isActive !== undefined) updateFields.isActive = isActive;\r\n\r\n    const updatedHomepage = await Page.findOneAndUpdate(\r\n      { path: '/homepage' },\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    ).populate('createdBy updatedBy', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Homepage updated successfully',\r\n      data: updatedHomepage\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating homepage',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete homepage\r\nexport const deleteHomepage = async (req: Request, res: Response) => {\r\n  try {\r\n    const homepage = await Page.findOne({ path: '/homepage' });\r\n    if (!homepage) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Homepage not found'\r\n      });\r\n    }\r\n\r\n    // Delete associated images using helper\r\n    await deleteHomepageImages(homepage.data as IHomepageData);\r\n\r\n    await Page.findOneAndDelete({ path: '/homepage' });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Homepage deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting homepage',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Legal page types\r\nconst LEGAL_PAGE_TYPES = {\r\n  PRIVACY_POLICY: '/legal/privacy-policy',\r\n  TERMS_OF_SERVICE: '/legal/terms-of-service',\r\n  COOKIE_POLICY: '/legal/cookie-policy',\r\n  REFUND_POLICY: '/legal/refund-policy',\r\n  SHIPPING_POLICY: '/legal/shipping-policy'\r\n} as const;\r\n\r\n// Get all legal pages (public route)\r\nexport const getAllLegalPages = async (req: Request, res: Response) => {\r\n  try {\r\n    const legalPages = await Page.find({\r\n      path: { $regex: '^/legal/' }\r\n    })\r\n      .populate('createdBy updatedBy', 'name email')\r\n      .sort({ path: 1 });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: legalPages\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching legal pages',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get specific legal page by type (public route)\r\nexport const getLegalPageByType = async (req: Request, res: Response) => {\r\n  try {\r\n    const { type } = req.params;\r\n    \r\n    // Validate legal page type\r\n    const validTypes = Object.keys(LEGAL_PAGE_TYPES).map(key => \r\n      key.toLowerCase().replace(/_/g, '-')\r\n    );\r\n    \r\n    if (!validTypes.includes(type)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Invalid legal page type'\r\n      });\r\n    }\r\n\r\n    const path = `/legal/${type}`;\r\n    const legalPage = await Page.findOne({ path })\r\n      .populate('createdBy updatedBy', 'name email');\r\n\r\n    if (!legalPage) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Legal page not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: legalPage\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching legal page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create or update legal page\r\nexport const createOrUpdateLegalPage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { type } = req.params;\r\n    let { data, isActive } = req.body;\r\n    const userId = (req as any).user?.id;\r\n    const uploadedFile = req.file;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    // Validate legal page type\r\n    const validTypes = Object.keys(LEGAL_PAGE_TYPES).map(key => \r\n      key.toLowerCase().replace(/_/g, '-')\r\n    );\r\n    \r\n    if (!validTypes.includes(type)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Invalid legal page type'\r\n      });\r\n    }\r\n\r\n    const path = `/legal/${type}`;\r\n    const pageName = type.split('-').map(word => \r\n      word.charAt(0).toUpperCase() + word.slice(1)\r\n    ).join(' ');\r\n\r\n    // Parse JSON data if it's a string\r\n    if (typeof data === 'string') {\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (parseError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Invalid JSON data format'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Initialize data object if not provided\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n\r\n    // Check if legal page already exists\r\n    const existingPage = await Page.findOne({ path });\r\n\r\n    // For new pages, require markdown file\r\n    if (!existingPage && !uploadedFile) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Markdown file is required for new legal pages'\r\n      });\r\n    }\r\n\r\n    // Process markdown file if provided\r\n    if (uploadedFile) {\r\n      try {\r\n        // Read the uploaded Markdown content\r\n        let markdownContent = '';\r\n        let fileUrl = '';\r\n        \r\n        // Handle different Cloudinary response formats\r\n        if ((uploadedFile as any).secure_url) {\r\n          // Standard Cloudinary response with secure_url\r\n          fileUrl = (uploadedFile as any).secure_url;\r\n          try {\r\n            const response = await axios.get(fileUrl);\r\n            markdownContent = response.data;\r\n          } catch (fetchError) {\r\n            throw new Error('Failed to fetch file content from Cloudinary');\r\n          }\r\n        } else if ((uploadedFile as any).url) {\r\n          // Alternative Cloudinary response with url\r\n          fileUrl = (uploadedFile as any).url;\r\n          try {\r\n            const response = await axios.get(fileUrl);\r\n            markdownContent = response.data;\r\n          } catch (fetchError) {\r\n            throw new Error('Failed to fetch file content from Cloudinary');\r\n          }\r\n        } else if ((uploadedFile as any).path && (uploadedFile as any).path.startsWith('http')) {\r\n          // Some configurations use 'path' for the Cloudinary URL\r\n          fileUrl = (uploadedFile as any).path;\r\n          try {\r\n            const response = await axios.get(fileUrl);\r\n            markdownContent = response.data;\r\n          } catch (fetchError) {\r\n            throw new Error('Failed to fetch file content from Cloudinary');\r\n          }\r\n        } else if (uploadedFile.path && fs.existsSync(uploadedFile.path)) {\r\n          // Fallback to local file if available\r\n          markdownContent = fs.readFileSync(uploadedFile.path, 'utf8');\r\n          // For local files, we might not have a URL yet\r\n          fileUrl = `local://${uploadedFile.path}`;\r\n        } else if (uploadedFile.buffer) {\r\n          // If file is in buffer\r\n          markdownContent = uploadedFile.buffer.toString('utf8');\r\n          fileUrl = 'buffer://uploaded-file';\r\n        } else {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: 'Unable to access uploaded file content. Please try uploading again.'\r\n          });\r\n        }\r\n\r\n        // Store both the file URL and the content, always as markdown\r\n        data.markdownUrl = fileUrl;\r\n        data.content = markdownContent;\r\n        data.contentType = 'markdown';\r\n        \r\n        // Clean up local file if it exists and we have a remote URL\r\n        if (uploadedFile.path && fs.existsSync(uploadedFile.path) && fileUrl.startsWith('http')) {\r\n          fs.unlinkSync(uploadedFile.path);\r\n        }\r\n      } catch (fileError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Error processing uploaded Markdown file',\r\n          error: fileError.message\r\n        });\r\n      }\r\n    }\r\n\r\n    if (existingPage) {\r\n      // Update existing legal page\r\n      const updateFields: any = {\r\n        updatedBy: userId,\r\n        version: existingPage.version + 1\r\n      };\r\n\r\n      if (data !== undefined && Object.keys(data).length > 0) {\r\n        // Merge with existing data, ensuring we preserve important fields\r\n        updateFields.data = { \r\n          ...existingPage.data, \r\n          ...data,\r\n          lastUpdated: new Date().toISOString()\r\n        };\r\n      }\r\n      if (isActive !== undefined) updateFields.isActive = isActive;\r\n\r\n      const updatedPage = await Page.findOneAndUpdate(\r\n        { path },\r\n        updateFields,\r\n        { new: true, runValidators: true }\r\n      ).populate('createdBy updatedBy', 'name email');\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${pageName} updated successfully`,\r\n        data: updatedPage\r\n      });\r\n    } else {\r\n      // Create new legal page\r\n      const pageData = {\r\n        ...data,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n\r\n      const newPageData = {\r\n        name: pageName,\r\n        path,\r\n        data: pageData,\r\n        createdBy: userId,\r\n        updatedBy: userId,\r\n        isActive: isActive !== undefined ? isActive : true\r\n      };\r\n\r\n      const newPage = new Page(newPageData);\r\n      const savedPage = await newPage.save();\r\n      \r\n      res.status(201).json({\r\n        success: true,\r\n        message: `${pageName} created successfully`,\r\n        data: savedPage\r\n      });\r\n    }\r\n  } catch (error: any) {\r\n    // Handle Cloudinary-specific errors\r\n    if (error.message && error.message.includes('file format not allowed')) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'File format not supported. Please upload a valid Markdown (.md) file.',\r\n        error: 'UNSUPPORTED_FILE_FORMAT'\r\n      });\r\n    }\r\n    \r\n    // Handle specific MongoDB errors\r\n    if (error.code === 11000) {\r\n      // Check if it's a path duplicate error\r\n      if (error.keyPattern && error.keyPattern.path) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'A legal page with this path already exists'\r\n        });\r\n      }\r\n      \r\n      // Generic duplicate key error\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Duplicate entry detected. Please try again.'\r\n      });\r\n    }\r\n\r\n    // Validation errors\r\n    if (error.name === 'ValidationError') {\r\n      const validationErrors = Object.values(error.errors).map((err: any) => err.message);\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Validation failed',\r\n        errors: validationErrors\r\n      });\r\n    }\r\n\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating/updating legal page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete legal page\r\nexport const deleteLegalPage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { type } = req.params;\r\n\r\n    // Validate legal page type\r\n    const validTypes = Object.keys(LEGAL_PAGE_TYPES).map(key => \r\n      key.toLowerCase().replace(/_/g, '-')\r\n    );\r\n    \r\n    if (!validTypes.includes(type)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Invalid legal page type'\r\n      });\r\n    }\r\n\r\n    const path = `/legal/${type}`;\r\n    const legalPage = await Page.findOne({ path });\r\n\r\n    if (!legalPage) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Legal page not found'\r\n      });\r\n    }\r\n\r\n    await Page.findOneAndDelete({ path });\r\n\r\n    const pageName = type.split('-').map(word => \r\n      word.charAt(0).toUpperCase() + word.slice(1)\r\n    ).join(' ');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: `${pageName} deleted successfully`\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting legal page',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get legal page types\r\nexport const getLegalPageTypes = async (req: Request, res: Response) => {\r\n  try {\r\n    const types = Object.keys(LEGAL_PAGE_TYPES).map(key => ({\r\n      key: key.toLowerCase().replace(/_/g, '-'),\r\n      name: key.split('_').map(word => \r\n        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n      ).join(' '),\r\n      path: LEGAL_PAGE_TYPES[key as keyof typeof LEGAL_PAGE_TYPES]\r\n    }));\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: types\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching legal page types',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Export upload middleware using helper\r\nexport const uploadHomepageImages = getHomepageUploadMiddleware();\r\n\r\n// Export upload middleware for legal documents\r\nexport const uploadLegalDocument = upload.legalDocument.single('markdownFile');\r\n\r\n// ==================== NAVBAR MANAGEMENT ====================\r\n\r\n// Get navbar configuration\r\nexport const getNavbar = async (req: Request, res: Response) => {\r\n  try {\r\n    const navbar = await Page.findOne({ path: 'navbar' })\r\n      .populate('createdBy updatedBy', 'email name')\r\n      .sort({ createdAt: -1 });\r\n\r\n    if (!navbar) {\r\n      // Return default navbar structure if none exists\r\n      const defaultNavbarData = {\r\n        navItems: [\r\n          {\r\n            id: uuidv4(),\r\n            title: \"WOMEN\",\r\n            order: 1,\r\n            categories: [\r\n              {\r\n                id: uuidv4(),\r\n                title: \"Women's Clothing\",\r\n                order: 1,\r\n                items: [\r\n                  { label: \"T-Shirts\", keyword: \"womens-tshirts\", href: \"/womens/t-shirts\", order: 1 },\r\n                  { label: \"Skirts\", keyword: \"womens-skirts\", href: \"/womens/skirts\", order: 2 },\r\n                  { label: \"Shorts\", keyword: \"womens-shorts\", href: \"/womens/shorts\", order: 3 },\r\n                  { label: \"Jeans\", keyword: \"womens-jeans\", href: \"/womens/jeans\", order: 4 }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            title: \"MEN\",\r\n            order: 2,\r\n            categories: [\r\n              {\r\n                id: uuidv4(),\r\n                title: \"Men's Clothing\",\r\n                order: 1,\r\n                items: [\r\n                  { label: \"T-Shirts\", keyword: \"mens-tshirts\", href: \"/mens/t-shirts\", order: 1 },\r\n                  { label: \"Shirts\", keyword: \"mens-shirts\", href: \"/mens/shirts\", order: 2 },\r\n                  { label: \"Jeans\", keyword: \"mens-jeans\", href: \"/mens/jeans\", order: 3 }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      };\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'Default navbar configuration retrieved',\r\n        data: defaultNavbarData\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Navbar configuration retrieved successfully',\r\n      data: navbar.data\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error retrieving navbar configuration',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create or update navbar configuration\r\nexport const updateNavbar = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = (req as any).user?.id;\r\n    const { navItems } = req.body;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    if (!navItems || !Array.isArray(navItems)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Invalid navbar data. navItems array is required.'\r\n      });\r\n    }\r\n\r\n    // Process navItems to add IDs and proper ordering\r\n    const processedNavItems = navItems.map((section: any, sectionIndex: number) => ({\r\n      id: uuidv4(),\r\n      title: section.title,\r\n      order: sectionIndex + 1,\r\n      categories: section.categories.map((category: any, categoryIndex: number) => ({\r\n        id: uuidv4(),\r\n        title: category.title,\r\n        order: categoryIndex + 1,\r\n        items: category.items.map((item: any, itemIndex: number) => ({\r\n          label: item.label,\r\n          keyword: item.keyword,\r\n          href: item.href,\r\n          order: itemIndex + 1\r\n        }))\r\n      }))\r\n    }));\r\n\r\n    const navbarData = {\r\n      navItems: processedNavItems\r\n    };\r\n\r\n    // Check if navbar page exists\r\n    let navbar = await Page.findOne({ path: 'navbar' });\r\n\r\n    if (navbar) {\r\n      // Update existing navbar\r\n      navbar.data = navbarData;\r\n      navbar.updatedBy = userId;\r\n      navbar.version = (navbar.version || 1) + 1;\r\n      await navbar.save();\r\n    } else {\r\n      // Create new navbar page\r\n      navbar = new Page({\r\n        name: 'Navbar Configuration',\r\n        path: 'navbar',\r\n        data: navbarData,\r\n        createdBy: userId,\r\n        updatedBy: userId,\r\n        isActive: true,\r\n        version: 1\r\n      });\r\n      await navbar.save();\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Navbar configuration updated successfully',\r\n      data: navbar.data\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating navbar configuration',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete navbar configuration (reset to default)\r\nexport const deleteNavbar = async (req: Request, res: Response) => {\r\n  try {\r\n    const userId = (req as any).user?.id;\r\n\r\n    if (!userId) {\r\n      return res.status(401).json({ success: false, message: 'User not authenticated' });\r\n    }\r\n\r\n    // Delete the navbar page\r\n    await Page.deleteOne({ path: 'navbar' });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Navbar configuration reset to default successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error resetting navbar configuration',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n","import express from 'express';\r\nimport * as pageController from '@/controllers/page.controller';\r\nimport { validateUserAccess, validateAdminAccess } from '@/middleware/auth.middleware';\r\n\r\nconst pagesRouter = express.Router();\r\n\r\n// Public routes - Homepage specific\r\npagesRouter.get('/homepage', pageController.getHomepage);\r\n\r\n// Public routes - Navbar configuration\r\npagesRouter.get('/navbar', pageController.getNavbar);\r\n\r\n// Public routes - Legal pages\r\npagesRouter.get('/legal', pageController.getAllLegalPages);\r\npagesRouter.get('/legal/types', pageController.getLegalPageTypes);\r\npagesRouter.get('/legal/:type', pageController.getLegalPageByType);\r\n\r\n// Protected routes (require authentication)\r\npagesRouter.use(validateUserAccess);\r\n\r\n// Admin only routes - Homepage management\r\npagesRouter.use(validateAdminAccess);\r\n\r\npagesRouter.post('/homepage', pageController.uploadHomepageImages, pageController.createHomepage);\r\npagesRouter.put('/homepage', pageController.uploadHomepageImages, pageController.updateHomepage);\r\npagesRouter.delete('/homepage', pageController.deleteHomepage);\r\n\r\n// Admin only routes - Navbar management\r\npagesRouter.put('/navbar', pageController.updateNavbar);\r\npagesRouter.delete('/navbar', pageController.deleteNavbar);\r\n\r\n// Admin only routes - Legal pages management\r\npagesRouter.put('/legal/:type', pageController.uploadLegalDocument, pageController.createOrUpdateLegalPage);\r\npagesRouter.delete('/legal/:type', pageController.deleteLegalPage);\r\n\r\n// Generic page routes (if needed for other pages)\r\npagesRouter.get('/', pageController.getAllPages);\r\npagesRouter.get('/:identifier', pageController.getPage);\r\npagesRouter.post('/', pageController.uploadHomepageImages, pageController.createPage);\r\npagesRouter.put('/:id', pageController.uploadHomepageImages, pageController.updatePage);\r\npagesRouter.delete('/:id', pageController.deletePage);\r\n\r\nexport default pagesRouter;\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface TestimonialData extends Document {\r\n  name: string;\r\n  stars: number;\r\n  published: boolean;\r\n  quote: string;\r\n  imageUrl?: string; // Made optional\r\n  occupation: string;\r\n  location: string;\r\n}\r\n\r\nconst testimonialSchema = new Schema<TestimonialData>(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    stars: {\r\n      type: Number,\r\n      required: true,\r\n      min: 0,\r\n      max: 5,\r\n    },\r\n    published: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    quote: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    imageUrl: {\r\n      type: String,\r\n      required: false, // Made optional\r\n    },\r\n    occupation: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    location: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nexport const Testimonial = mongoose.model<TestimonialData>(\"Testimonial\", testimonialSchema);","import { Request, Response } from 'express';\r\nimport { Testimonial } from '@/models/testimonials.model';\r\nimport { \r\n  handleOptionalImageUpload, \r\n  deleteImageFromUrl,\r\n  getTestimonialUploadMiddleware \r\n} from '@/utils/imageUpload.helpers';\r\n\r\n// Get all testimonials (public route)\r\nexport const getAllTestimonials = async (req: Request, res: Response) => {\r\n  try {\r\n    const { published, page = 1, limit = 10, stars, search } = req.query;\r\n    \r\n    const filter: any = {};\r\n    \r\n    // Filter by published status if specified\r\n    if (published !== undefined) {\r\n      filter.published = published === 'true';\r\n    }\r\n    \r\n    // Filter by star rating if specified\r\n    if (stars) {\r\n      filter.stars = { $gte: Number(stars) };\r\n    }\r\n\r\n    // Search by name if specified (only if search is not empty)\r\n    if (search && search.toString().trim()) {\r\n      filter.name = { $regex: search.toString().trim(), $options: 'i' }; // Case-insensitive search\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const testimonials = await Testimonial.find(filter)\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Testimonial.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        testimonials,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching testimonials',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get published testimonials only (public route)\r\nexport const getPublishedTestimonials = async (req: Request, res: Response) => {\r\n  try {\r\n    const { page = 1, limit = 6, stars } = req.query;\r\n    \r\n    const filter: any = { published: true };\r\n    \r\n    // Filter by star rating if specified\r\n    if (stars) {\r\n      filter.stars = { $gte: Number(stars) };\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const testimonials = await Testimonial.find(filter)\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Testimonial.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        testimonials,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching published testimonials',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get single testimonial (public route)\r\nexport const getTestimonial = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    const testimonial = await Testimonial.findById(id);\r\n\r\n    if (!testimonial) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Testimonial not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: testimonial\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching testimonial',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create testimonial (admin only)\r\nexport const createTestimonial = async (req: Request, res: Response) => {\r\n  try {\r\n    const { name, stars, quote, occupation, location, published = false } = req.body;\r\n\r\n    if (!name || !stars || !quote || !occupation || !location) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'All fields except image are required'\r\n      });\r\n    }\r\n\r\n    if (stars < 0 || stars > 5) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Stars must be between 0 and 5'\r\n      });\r\n    }\r\n\r\n    // Handle optional image upload using helper\r\n    const imageUrl = await handleOptionalImageUpload(req);\r\n\r\n    const newTestimonial = new Testimonial({\r\n      name,\r\n      stars: Number(stars),\r\n      quote,\r\n      imageUrl, // Will be undefined if no image uploaded\r\n      occupation,\r\n      location,\r\n      published: published === 'true' || published === true\r\n    });\r\n\r\n    const savedTestimonial = await newTestimonial.save();\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Testimonial created successfully',\r\n      data: savedTestimonial\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating testimonial',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Update testimonial (admin only)\r\nexport const updateTestimonial = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, stars, quote, occupation, location, published } = req.body;\r\n\r\n    const testimonial = await Testimonial.findById(id);\r\n    if (!testimonial) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Testimonial not found'\r\n      });\r\n    }\r\n\r\n    // Validate stars if provided\r\n    if (stars !== undefined && (stars < 0 || stars > 5)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Stars must be between 0 and 5'\r\n      });\r\n    }\r\n\r\n    const updateFields: any = {};\r\n    \r\n    if (name !== undefined) updateFields.name = name;\r\n    if (stars !== undefined) updateFields.stars = Number(stars);\r\n    if (quote !== undefined) updateFields.quote = quote;\r\n    if (occupation !== undefined) updateFields.occupation = occupation;\r\n    if (location !== undefined) updateFields.location = location;\r\n    if (published !== undefined) updateFields.published = published === 'true' || published === true;\r\n\r\n    // Handle optional image update using helper\r\n    const newImageUrl = await handleOptionalImageUpload(req, testimonial.imageUrl);\r\n    if (newImageUrl) {\r\n      updateFields.imageUrl = newImageUrl;\r\n    }\r\n\r\n    const updatedTestimonial = await Testimonial.findByIdAndUpdate(\r\n      id,\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Testimonial updated successfully',\r\n      data: updatedTestimonial\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating testimonial',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Toggle publish status (admin only)\r\nexport const togglePublishStatus = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { published } = req.body;\r\n\r\n    if (published === undefined) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Published status is required'\r\n      });\r\n    }\r\n\r\n    const testimonial = await Testimonial.findById(id);\r\n    if (!testimonial) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Testimonial not found'\r\n      });\r\n    }\r\n\r\n    const updatedTestimonial = await Testimonial.findByIdAndUpdate(\r\n      id,\r\n      { published: published === 'true' || published === true },\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: `Testimonial ${updatedTestimonial?.published ? 'published' : 'unpublished'} successfully`,\r\n      data: updatedTestimonial\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating testimonial publish status',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete testimonial (admin only)\r\nexport const deleteTestimonial = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const testimonial = await Testimonial.findById(id);\r\n    if (!testimonial) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Testimonial not found'\r\n      });\r\n    }\r\n\r\n    // Delete associated image using helper (only if exists)\r\n    if (testimonial.imageUrl) {\r\n      await deleteImageFromUrl(testimonial.imageUrl);\r\n    }\r\n\r\n    await Testimonial.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Testimonial deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting testimonial',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Export upload middleware using helper\r\nexport const uploadTestimonialImage = getTestimonialUploadMiddleware();\r\n","import express from 'express';\r\nimport * as testimonialController from '@/controllers/testimonial.controller';\r\nimport { validateUserAccess, validateAdminAccess } from '@/middleware/auth.middleware';\r\n\r\nconst testimonialsRouter = express.Router();\r\n\r\n// Public routes - No authentication required\r\ntestimonialsRouter.get('/', testimonialController.getAllTestimonials);\r\ntestimonialsRouter.get('/published', testimonialController.getPublishedTestimonials);\r\ntestimonialsRouter.get('/:id', testimonialController.getTestimonial);\r\n\r\n// Protected routes - Admin only\r\ntestimonialsRouter.use(validateUserAccess);\r\ntestimonialsRouter.use(validateAdminAccess);\r\n\r\n// CRUD operations (admin only) - image upload is optional\r\ntestimonialsRouter.post('/', testimonialController.uploadTestimonialImage, testimonialController.createTestimonial);\r\ntestimonialsRouter.put('/:id', testimonialController.uploadTestimonialImage, testimonialController.updateTestimonial);\r\ntestimonialsRouter.delete('/:id', testimonialController.deleteTestimonial);\r\n\r\n// Specific route for publishing/unpublishing (no image upload needed)\r\ntestimonialsRouter.patch('/:id/publish', testimonialController.togglePublishStatus);\r\n\r\nexport default testimonialsRouter;\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IInquiry extends Document {\r\n  name: string;\r\n  email: string;\r\n  purpose: string;\r\n  message: string;\r\n  resolved: boolean;\r\n  resolvedBy?: mongoose.Types.ObjectId;\r\n  resolvingMessage?: string;\r\n  createdAt: Date;\r\n  resolvedAt?: Date;\r\n}\r\n\r\nconst InquirySchema: Schema = new Schema<IInquiry>({\r\n  name: { type: String, required: true, trim: true },\r\n  email: { type: String, required: true },\r\n  purpose: { \r\n    type: String, \r\n    required: true,\r\n    trim: true\r\n  },\r\n  message: { type: String, required: true },\r\n  resolved: { type: Boolean, default: false },\r\n  resolvedBy: { type: Schema.Types.ObjectId, required: false, ref: \"User\" },\r\n  resolvingMessage: { type: String, required: false },\r\n  createdAt: { type: Date, default: Date.now },\r\n  resolvedAt: { type: Date, required: false },\r\n});\r\n\r\nexport const Inquiry = mongoose.model<IInquiry>(\"Inquiry\", InquirySchema);\r\n","import { Request, Response } from 'express';\r\nimport { Inquiry } from '@/models/inquiry.model';\r\n\r\n// Get all inquiries (admin only)\r\nexport const getAllInquiries = async (req: Request, res: Response) => {\r\n  try {\r\n    const { resolved, page = 1, limit = 10, search } = req.query;\r\n    \r\n    const filter: any = {};\r\n    \r\n    // Filter by resolved status if specified\r\n    if (resolved !== undefined) {\r\n      filter.resolved = resolved === 'true';\r\n    }\r\n\r\n    // Search by name or email if specified\r\n    if (search && search.toString().trim()) {\r\n      const searchTerm = search.toString().trim();\r\n      filter.$or = [\r\n        { name: { $regex: searchTerm, $options: 'i' } },\r\n        { email: { $regex: searchTerm, $options: 'i' } }\r\n      ];\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const inquiries = await Inquiry.find(filter)\r\n      .populate('resolvedBy', 'name email')\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Inquiry.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        inquiries,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching inquiries',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get single inquiry (admin only)\r\nexport const getInquiry = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    const inquiry = await Inquiry.findById(id)\r\n      .populate('resolvedBy', 'name email');\r\n\r\n    if (!inquiry) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Inquiry not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: inquiry\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching inquiry',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create inquiry (public route)\r\nexport const createInquiry = async (req: Request, res: Response) => {\r\n  try {\r\n    const { name, email, purpose, message } = req.body;\r\n\r\n    if (!name || !email || !purpose || !message) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Name, email, purpose, and message are required'\r\n      });\r\n    }\r\n\r\n    // Basic email validation\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Please provide a valid email address'\r\n      });\r\n    }\r\n\r\n    const newInquiry = new Inquiry({\r\n      name: name.trim(),\r\n      email: email.trim().toLowerCase(),\r\n      purpose: purpose.trim(),\r\n      message: message.trim()\r\n    });\r\n\r\n    const savedInquiry = await newInquiry.save();\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Inquiry submitted successfully',\r\n      data: savedInquiry\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating inquiry',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Resolve inquiry (admin only)\r\nexport const resolveInquiry = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { resolvingMessage } = req.body;\r\n    const adminUser = (req as any).user;\r\n\r\n    if (!resolvingMessage || !resolvingMessage.trim()) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Resolving message is required'\r\n      });\r\n    }\r\n\r\n    const inquiry = await Inquiry.findById(id);\r\n    if (!inquiry) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Inquiry not found'\r\n      });\r\n    }\r\n\r\n    if (inquiry.resolved) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Inquiry is already resolved'\r\n      });\r\n    }\r\n\r\n    const updatedInquiry = await Inquiry.findByIdAndUpdate(\r\n      id,\r\n      {\r\n        resolved: true,\r\n        resolvedBy: adminUser._id,\r\n        resolvingMessage: resolvingMessage.trim(),\r\n        resolvedAt: new Date()\r\n      },\r\n      { new: true, runValidators: true }\r\n    ).populate('resolvedBy', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Inquiry resolved successfully',\r\n      data: updatedInquiry\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error resolving inquiry',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Unresolve inquiry (admin only)\r\nexport const unresolveInquiry = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const inquiry = await Inquiry.findById(id);\r\n    if (!inquiry) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Inquiry not found'\r\n      });\r\n    }\r\n\r\n    if (!inquiry.resolved) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Inquiry is not resolved'\r\n      });\r\n    }\r\n\r\n    const updatedInquiry = await Inquiry.findByIdAndUpdate(\r\n      id,\r\n      {\r\n        resolved: false,\r\n        $unset: {\r\n          resolvedBy: 1,\r\n          resolvingMessage: 1,\r\n          resolvedAt: 1\r\n        }\r\n      },\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Inquiry marked as unresolved',\r\n      data: updatedInquiry\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error unresolving inquiry',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete inquiry (admin only)\r\nexport const deleteInquiry = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const inquiry = await Inquiry.findById(id);\r\n    if (!inquiry) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Inquiry not found'\r\n      });\r\n    }\r\n\r\n    await Inquiry.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Inquiry deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting inquiry',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get inquiry stats (admin only)\r\nexport const getInquiryStats = async (req: Request, res: Response) => {\r\n  try {\r\n    const totalInquiries = await Inquiry.countDocuments();\r\n    const resolvedInquiries = await Inquiry.countDocuments({ resolved: true });\r\n    const pendingInquiries = await Inquiry.countDocuments({ resolved: false });\r\n\r\n    // Get recent inquiries (last 7 days)\r\n    const sevenDaysAgo = new Date();\r\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n    const recentInquiries = await Inquiry.countDocuments({\r\n      createdAt: { $gte: sevenDaysAgo }\r\n    });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        total: totalInquiries,\r\n        resolved: resolvedInquiries,\r\n        pending: pendingInquiries,\r\n        recent: recentInquiries,\r\n        resolutionRate: totalInquiries > 0 ? ((resolvedInquiries / totalInquiries) * 100).toFixed(1) : '0'\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching inquiry stats',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n","import express from 'express';\r\nimport * as inquiryController from '@/controllers/inquiry.controller';\r\nimport { validateUserAccess, validateAdminAccess } from '@/middleware/auth.middleware';\r\n\r\nconst inquiryRouter = express.Router();\r\n\r\n// Public routes - No authentication required\r\ninquiryRouter.post('/', inquiryController.createInquiry);\r\n\r\n// Protected routes - Admin only\r\ninquiryRouter.use(validateUserAccess);\r\ninquiryRouter.use(validateAdminAccess);\r\n\r\n// Admin routes\r\ninquiryRouter.get('/', inquiryController.getAllInquiries);\r\ninquiryRouter.get('/stats', inquiryController.getInquiryStats);\r\ninquiryRouter.get('/:id', inquiryController.getInquiry);\r\ninquiryRouter.patch('/:id/resolve', inquiryController.resolveInquiry);\r\ninquiryRouter.patch('/:id/unresolve', inquiryController.unresolveInquiry);\r\ninquiryRouter.delete('/:id', inquiryController.deleteInquiry);\r\n\r\nexport default inquiryRouter;\r\n","import { Request, Response } from 'express';\r\nimport User, { EUserRole } from '@/models/user.model';\r\nimport shopifyService from '@/services/shopify.service';\r\n\r\n// Helper function to fetch wishlist with product details\r\nconst getWishlistWithDetails = async (wishlisted: string[]) => {\r\n  const wishlistItems = [];\r\n  \r\n  for (const productId of wishlisted) {\r\n    try {\r\n      // Extract numeric ID from Shopify GraphQL global ID\r\n      const numericId = productId.toString().match(/(\\d+)$/)?.[1] || productId;\r\n      const product = await shopifyService.getProduct(numericId);\r\n      \r\n      if (product) {\r\n        // Format product data for frontend\r\n        const formattedProduct = {\r\n          id: product.id,\r\n          title: product.title,\r\n          handle: product.handle,\r\n          price: product.variants?.[0]?.price || '0.00',\r\n          compareAtPrice: product.variants?.[0]?.compare_at_price,\r\n          image: product.images?.[0]?.src || product.image?.src,\r\n          available: product.variants?.some((variant: any) => variant.available) || false\r\n        };\r\n        wishlistItems.push(formattedProduct);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching product ${productId}:`, error);\r\n      // Continue with other products even if one fails\r\n    }\r\n  }\r\n  \r\n  return {\r\n    wishlistItems,\r\n    wishlisted\r\n  };\r\n};\r\n\r\n// Get all users (super admin only)\r\nexport const getAllUsers = async (req: Request, res: Response) => {\r\n  try {\r\n    const { role, page = 1, limit = 20, search } = req.query;\r\n    \r\n    const filter: any = {};\r\n    \r\n    // Filter by role if specified\r\n    if (role && Object.values(EUserRole).includes(role as EUserRole)) {\r\n      filter.role = role;\r\n    }\r\n\r\n    // Search by name or email if specified\r\n    if (search && search.toString().trim()) {\r\n      const searchTerm = search.toString().trim();\r\n      filter.$or = [\r\n        { name: { $regex: searchTerm, $options: 'i' } },\r\n        { email: { $regex: searchTerm, $options: 'i' } }\r\n      ];\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const users = await User.find(filter)\r\n      .select('-password') // Exclude password from response\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await User.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        users,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching users',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get single user by ID (user themselves or super admin only)\r\nexport const getUserById = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const requestingUser = (req as any).user;\r\n    \r\n    // Check if user is trying to access their own profile or if they're super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    \r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. You can only view your own profile.'\r\n      });\r\n    }\r\n    \r\n    const user = await User.findById(id).select('-password');\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: user\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching user',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Change user role (super admin only)\r\nexport const changeUserRole = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { role } = req.body;\r\n    const requestingUser = (req as any).user;\r\n\r\n    // Validate role\r\n    if (!role || !Object.values(EUserRole).includes(role)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Invalid role. Valid roles are: client, admin, super_admin'\r\n      });\r\n    }\r\n\r\n    // Find the user to update\r\n    const userToUpdate = await User.findById(id);\r\n    if (!userToUpdate) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    // Prevent super admin from demoting themselves\r\n    if (userToUpdate._id.toString() === requestingUser._id.toString() && \r\n        requestingUser.role === EUserRole.superAdmin && \r\n        role !== EUserRole.superAdmin) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Super admins cannot demote themselves'\r\n      });\r\n    }\r\n\r\n    // Prevent changing another super admin's role\r\n    if (userToUpdate.role === EUserRole.superAdmin && \r\n        userToUpdate._id.toString() !== requestingUser._id.toString()) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Cannot change another super admin\\'s role'\r\n      });\r\n    }\r\n\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      id,\r\n      { role },\r\n      { new: true, runValidators: true }\r\n    ).select('-password');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: `User role updated to ${role} successfully`,\r\n      data: updatedUser\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating user role',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get user statistics (super admin only)\r\nexport const getUserStats = async (req: Request, res: Response) => {\r\n  try {\r\n    const totalUsers = await User.countDocuments();\r\n    const clientUsers = await User.countDocuments({ role: EUserRole.client });\r\n    const adminUsers = await User.countDocuments({ role: EUserRole.admin });\r\n    const superAdminUsers = await User.countDocuments({ role: EUserRole.superAdmin });\r\n\r\n    // Get recent users (last 30 days)\r\n    const thirtyDaysAgo = new Date();\r\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n    const recentUsers = await User.countDocuments({\r\n      createdAt: { $gte: thirtyDaysAgo }\r\n    });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        total: totalUsers,\r\n        clients: clientUsers,\r\n        admins: adminUsers,\r\n        superAdmins: superAdminUsers,\r\n        recentSignups: recentUsers,\r\n        breakdown: {\r\n          clientPercentage: totalUsers > 0 ? ((clientUsers / totalUsers) * 100).toFixed(1) : '0',\r\n          adminPercentage: totalUsers > 0 ? ((adminUsers / totalUsers) * 100).toFixed(1) : '0',\r\n          superAdminPercentage: totalUsers > 0 ? ((superAdminUsers / totalUsers) * 100).toFixed(1) : '0'\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching user statistics',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Update user profile (users can update their own profile, super admins can update any)\r\nexport const updateUserProfile = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, phone, email, address } = req.body;\r\n    const requestingUser = (req as any).user;\r\n    \r\n    // Check if user is trying to update their own profile or if they're super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    \r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. You can only update your own profile.'\r\n      });\r\n    }\r\n\r\n    const userToUpdate = await User.findById(id);\r\n    if (!userToUpdate) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    // Build update object\r\n    const updateFields: any = {};\r\n    if (name) updateFields.name = name.trim();\r\n    if (phone) updateFields.phone = phone.trim();\r\n    if (email) {\r\n      // Check if email is already taken by another user\r\n      const existingUser = await User.findOne({ \r\n        email: email.toLowerCase().trim(),\r\n        _id: { $ne: id }\r\n      });\r\n      \r\n      if (existingUser) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Email is already registered by another user'\r\n        });\r\n      }\r\n      \r\n      updateFields.email = email.toLowerCase().trim();\r\n    }\r\n\r\n    // Handle address update\r\n    if (address) {\r\n      updateFields.address = {};\r\n      if (address.street !== undefined) updateFields.address.street = address.street?.trim() || '';\r\n      if (address.city !== undefined) updateFields.address.city = address.city?.trim() || '';\r\n      if (address.state !== undefined) updateFields.address.state = address.state?.trim() || '';\r\n      if (address.zip !== undefined) updateFields.address.zip = address.zip?.trim() || '';\r\n      if (address.country !== undefined) updateFields.address.country = address.country?.trim() || '';\r\n    }\r\n\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      id,\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    ).select('-password');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Profile updated successfully',\r\n      data: updatedUser\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating profile',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete user (super admin only, cannot delete themselves)\r\nexport const deleteUser = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const requestingUser = (req as any).user;\r\n\r\n    // Prevent super admin from deleting themselves\r\n    if (requestingUser._id.toString() === id) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'You cannot delete your own account'\r\n      });\r\n    }\r\n\r\n    const userToDelete = await User.findById(id);\r\n    if (!userToDelete) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    // Prevent deleting another super admin\r\n    if (userToDelete.role === EUserRole.superAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Cannot delete another super admin account'\r\n      });\r\n    }\r\n\r\n    await User.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'User deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting user',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// @desc    Add/Update user address\r\n// @route   PUT /api/users/:id/address\r\nexport const updateUserAddress = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { street, city, state, zip, country } = req.body;\r\n    const requestingUser = (req as any).user;\r\n    \r\n    // Check if user is trying to update their own address or if they're super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    \r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. You can only update your own address.'\r\n      });\r\n    }\r\n\r\n    const userToUpdate = await User.findById(id);\r\n    if (!userToUpdate) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    // Build address object\r\n    const addressData: any = {};\r\n    if (street !== undefined) addressData['address.street'] = street?.trim() || '';\r\n    if (city !== undefined) addressData['address.city'] = city?.trim() || '';\r\n    if (state !== undefined) addressData['address.state'] = state?.trim() || '';\r\n    if (zip !== undefined) addressData['address.zip'] = zip?.trim() || '';\r\n    if (country !== undefined) addressData['address.country'] = country?.trim() || '';\r\n\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      id,\r\n      { $set: addressData },\r\n      { new: true, runValidators: true }\r\n    ).select('-password');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Address updated successfully',\r\n      data: {\r\n        address: updatedUser?.address || null,\r\n        user: updatedUser\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating address',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// @desc    Get user address\r\n// @route   GET /api/users/:id/address\r\nexport const getUserAddress = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const requestingUser = (req as any).user;\r\n    \r\n    // Check if user is trying to access their own address or if they're super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    \r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. You can only view your own address.'\r\n      });\r\n    }\r\n\r\n    const user = await User.findById(id).select('address name email');\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        address: user.address || null\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching address',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// @desc    Delete user address\r\n// @route   DELETE /api/users/:id/address\r\nexport const deleteUserAddress = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const requestingUser = (req as any).user;\r\n    \r\n    // Check if user is trying to delete their own address or if they're super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    \r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. You can only delete your own address.'\r\n      });\r\n    }\r\n\r\n    const userToUpdate = await User.findById(id);\r\n    if (!userToUpdate) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'User not found'\r\n      });\r\n    }\r\n\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      id,\r\n      { $unset: { address: 1 } },\r\n      { new: true }\r\n    ).select('-password');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Address deleted successfully',\r\n      data: updatedUser\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting address',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Add product to wishlist\r\nexport const addToWishlist = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { productId } = req.body;\r\n    const requestingUser = (req as any).user;\r\n\r\n    // Only allow user to modify their own wishlist or super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({ success: false, message: 'Access denied. You can only modify your own wishlist.' });\r\n    }\r\n\r\n    if (!productId) {\r\n      return res.status(400).json({ success: false, message: 'Product ID is required.' });\r\n    }\r\n\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n      return res.status(404).json({ success: false, message: 'User not found' });\r\n    }\r\n\r\n    // Add product to wishlist if not already present\r\n    if (!user.wishlisted.includes(productId)) {\r\n      user.wishlisted.push(productId);\r\n      await user.save();\r\n    }\r\n\r\n    // Fetch wishlist with product details\r\n    const wishlistData = await getWishlistWithDetails(user.wishlisted);\r\n\r\n    res.status(200).json({ \r\n      success: true, \r\n      message: 'Product added to wishlist', \r\n      data: wishlistData\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ success: false, message: 'Error adding to wishlist', error: error.message });\r\n  }\r\n};\r\n\r\n// Remove product from wishlist\r\nexport const removeFromWishlist = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id, productId } = req.params;\r\n    const requestingUser = (req as any).user;\r\n\r\n    // Only allow user to modify their own wishlist or super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({ success: false, message: 'Access denied. You can only modify your own wishlist.' });\r\n    }\r\n\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n      return res.status(404).json({ success: false, message: 'User not found' });\r\n    }\r\n\r\n    user.wishlisted = user.wishlisted.filter((pid) => pid !== productId);\r\n    await user.save();\r\n\r\n    // Fetch wishlist with product details\r\n    const wishlistData = await getWishlistWithDetails(user.wishlisted);\r\n\r\n    res.status(200).json({ \r\n      success: true, \r\n      message: 'Product removed from wishlist', \r\n      data: wishlistData\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ success: false, message: 'Error removing from wishlist', error: error.message });\r\n  }\r\n};\r\n\r\n// Get user's wishlist\r\nexport const getWishlist = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const requestingUser = (req as any).user;\r\n\r\n    // Only allow user to view their own wishlist or super admin\r\n    const isOwnProfile = requestingUser._id.toString() === id;\r\n    const isSuperAdmin = requestingUser.role === EUserRole.superAdmin;\r\n    if (!isOwnProfile && !isSuperAdmin) {\r\n      return res.status(403).json({ success: false, message: 'Access denied. You can only view your own wishlist.' });\r\n    }\r\n\r\n    const user = await User.findById(id).select('wishlisted');\r\n    if (!user) {\r\n      return res.status(404).json({ success: false, message: 'User not found' });\r\n    }\r\n\r\n    // Fetch wishlist with product details\r\n    const wishlistData = await getWishlistWithDetails(user.wishlisted);\r\n\r\n    res.status(200).json({ \r\n      success: true, \r\n      data: wishlistData\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({ success: false, message: 'Error fetching wishlist', error: error.message });\r\n  }\r\n};","import express from 'express';\r\nimport * as userController from '@/controllers/user.controller';\r\nimport { validateUserAccess, validateSuperAdminAccess } from '@/middleware/auth.middleware';\r\n\r\nconst userRouter = express.Router();\r\n\r\n// All routes require authentication\r\nuserRouter.use(validateUserAccess);\r\n\r\n// Routes accessible by authenticated users (for their own profile) and super admins\r\nuserRouter.get('/:id', userController.getUserById);\r\nuserRouter.put('/:id', userController.updateUserProfile);\r\n\r\n// Address routes - users can manage their own address, super admins can manage any\r\nuserRouter.get('/:id/address', userController.getUserAddress);\r\nuserRouter.put('/:id/address', userController.updateUserAddress);\r\nuserRouter.delete('/:id/address', userController.deleteUserAddress);\r\n\r\n// Routes accessible only by super admins\r\nuserRouter.get('/', validateSuperAdminAccess, userController.getAllUsers);\r\nuserRouter.get('/stats/overview', validateSuperAdminAccess, userController.getUserStats);\r\nuserRouter.patch('/:id/role', validateSuperAdminAccess, userController.changeUserRole);\r\nuserRouter.delete('/:id', validateSuperAdminAccess, userController.deleteUser);\r\n\r\n// Wishlist routes\r\nuserRouter.post('/:id/wishlist', userController.addToWishlist); // Add product to wishlist\r\nuserRouter.delete('/:id/wishlist/:productId', userController.removeFromWishlist); // Remove product from wishlist\r\nuserRouter.get('/:id/wishlist', userController.getWishlist); // Get user's wishlist\r\n\r\nexport default userRouter;\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IReview extends Document {\r\n  userId: mongoose.Types.ObjectId;\r\n  productId: string;\r\n  rating: number;\r\n  comment: string;\r\n  stars: number;\r\n  imageUrls?: string[];\r\n  verifiedBuyer?: boolean;\r\n  foundHelpful?: number;\r\n  notHelpful?: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst reviewSchema: Schema = new Schema(\r\n  {\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\",\r\n    },\r\n    productId: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    rating: {\r\n      type: Number,\r\n      required: true,\r\n      min: 1,\r\n      max: 5,\r\n    },\r\n    comment: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    stars: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    imageUrls: {\r\n      type: [String],\r\n      default: [],\r\n    },\r\n    verifiedBuyer: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    foundHelpful: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    notHelpful: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nexport const Review = mongoose.model<IReview>(\"Review\", reviewSchema);\r\n","import { Request, Response } from 'express';\r\nimport { Review } from '@/models/review.model';\r\nimport { \r\n  handleOptionalImageUpload, \r\n  deleteImageFromUrl,\r\n  getReviewUploadMiddleware \r\n} from '@/utils/imageUpload.helpers';\r\n\r\n// Get all reviews for a product (public route)\r\nexport const getProductReviews = async (req: Request, res: Response) => {\r\n  try {\r\n    const { productId } = req.params;\r\n    const { page = 1, limit = 10, rating, sortBy = 'createdAt', sortOrder = 'desc' } = req.query;\r\n    \r\n    const filter: any = { productId };\r\n    \r\n    // Filter by rating if specified\r\n    if (rating) {\r\n      filter.rating = Number(rating);\r\n    }\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    const sort: any = {};\r\n    sort[sortBy as string] = sortOrder === 'asc' ? 1 : -1;\r\n    \r\n    const reviews = await Review.find(filter)\r\n      .populate('userId', 'name email')\r\n      .sort(sort)\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Review.countDocuments(filter);\r\n    const averageRating = await Review.aggregate([\r\n      { $match: { productId } },\r\n      { $group: { _id: null, avgRating: { $avg: '$rating' }, totalReviews: { $sum: 1 } } }\r\n    ]);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        reviews,\r\n        averageRating: averageRating[0]?.avgRating || 0,\r\n        totalReviews: averageRating[0]?.totalReviews || 0,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching reviews',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get all reviews (admin only)\r\nexport const getAllReviews = async (req: Request, res: Response) => {\r\n  try {\r\n    const { page = 1, limit = 10, rating, userId, productId } = req.query;\r\n    \r\n    const filter: any = {};\r\n    \r\n    if (rating) filter.rating = Number(rating);\r\n    if (userId) filter.userId = userId;\r\n    if (productId) filter.productId = productId;\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const reviews = await Review.find(filter)\r\n      .populate('userId', 'name email')\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Review.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        reviews,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching reviews',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get single review (public route)\r\nexport const getReview = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    \r\n    const review = await Review.findById(id).populate('userId', 'name email');\r\n\r\n    if (!review) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Review not found'\r\n      });\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: review\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching review',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Create review (verified users only)\r\nexport const createReview = async (req: any, res: Response) => {\r\n  try {\r\n    const { productId, rating, comment } = req.body;\r\n    const userId = req.user._id;\r\n\r\n    if (!productId || !rating || !comment) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Product ID, rating, and comment are required'\r\n      });\r\n    }\r\n\r\n    if (rating < 1 || rating > 5) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Rating must be between 1 and 5'\r\n      });\r\n    }\r\n\r\n    // Check if user already reviewed this product\r\n    const existingReview = await Review.findOne({ userId, productId });\r\n    if (existingReview) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'You have already reviewed this product'\r\n      });\r\n    }\r\n\r\n    // Handle optional image uploads\r\n    const imageUrls = await handleOptionalImageUpload(req, undefined, true); // true for multiple images\r\n\r\n    const newReview = new Review({\r\n      userId,\r\n      productId,\r\n      rating: Number(rating),\r\n      comment,\r\n      stars: Number(rating), // stars same as rating\r\n      imageUrls: imageUrls || [],\r\n      verifiedBuyer: req.user.verified\r\n    });\r\n\r\n    const savedReview = await newReview.save();\r\n    await savedReview.populate('userId', 'name email');\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      message: 'Review created successfully',\r\n      data: savedReview\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error creating review',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Update review (own review only)\r\nexport const updateReview = async (req: any, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { rating, comment } = req.body;\r\n    const userId = req.user._id;\r\n\r\n    const review = await Review.findById(id);\r\n    if (!review) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Review not found'\r\n      });\r\n    }\r\n\r\n    // Check if user owns this review\r\n    if (review.userId.toString() !== userId.toString()) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'You can only update your own reviews'\r\n      });\r\n    }\r\n\r\n    // Validate rating if provided\r\n    if (rating !== undefined && (rating < 1 || rating > 5)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Rating must be between 1 and 5'\r\n      });\r\n    }\r\n\r\n    const updateFields: any = {};\r\n    \r\n    if (rating !== undefined) {\r\n      updateFields.rating = Number(rating);\r\n      updateFields.stars = Number(rating);\r\n    }\r\n    if (comment !== undefined) updateFields.comment = comment;\r\n\r\n    // Handle optional image update\r\n    const newImageUrls = await handleOptionalImageUpload(req, review.imageUrls, true);\r\n    if (newImageUrls) {\r\n      updateFields.imageUrls = newImageUrls;\r\n    }\r\n\r\n    const updatedReview = await Review.findByIdAndUpdate(\r\n      id,\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    ).populate('userId', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Review updated successfully',\r\n      data: updatedReview\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating review',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Delete review (own review or admin only)\r\nexport const deleteReview = async (req: any, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userId = req.user._id;\r\n    const userRole = req.user.role;\r\n\r\n    const review = await Review.findById(id);\r\n    if (!review) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Review not found'\r\n      });\r\n    }\r\n\r\n    // Check if user owns this review or is admin\r\n    const isOwner = review.userId.toString() === userId.toString();\r\n    const isAdmin = userRole === 'admin' || userRole === 'super_admin';\r\n    \r\n    if (!isOwner && !isAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'You can only delete your own reviews or you must be an admin'\r\n      });\r\n    }\r\n\r\n    // Delete associated images if any\r\n    if (review.imageUrls && review.imageUrls.length > 0) {\r\n      for (const imageUrl of review.imageUrls) {\r\n        await deleteImageFromUrl(imageUrl);\r\n      }\r\n    }\r\n\r\n    await Review.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Review deleted successfully'\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error deleting review',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Toggle found helpful (authenticated users only)\r\nexport const toggleFoundHelpful = async (req: any, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { helpful } = req.body; // true for helpful, false for not helpful\r\n\r\n    if (helpful === undefined) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Helpful status is required'\r\n      });\r\n    }\r\n\r\n    const review = await Review.findById(id);\r\n    if (!review) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Review not found'\r\n      });\r\n    }\r\n\r\n    const updateFields: any = {};\r\n    if (helpful === true || helpful === 'true') {\r\n      updateFields.foundHelpful = (review.foundHelpful || 0) + 1;\r\n    } else {\r\n      updateFields.notHelpful = (review.notHelpful || 0) + 1;\r\n    }\r\n\r\n    const updatedReview = await Review.findByIdAndUpdate(\r\n      id,\r\n      updateFields,\r\n      { new: true, runValidators: true }\r\n    ).populate('userId', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: `Review marked as ${helpful ? 'helpful' : 'not helpful'}`,\r\n      data: updatedReview\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating review helpfulness',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Mark as verified buyer (admin only)\r\nexport const toggleVerifiedBuyer = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { verifiedBuyer } = req.body;\r\n\r\n    if (verifiedBuyer === undefined) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Verified buyer status is required'\r\n      });\r\n    }\r\n\r\n    const review = await Review.findById(id);\r\n    if (!review) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Review not found'\r\n      });\r\n    }\r\n\r\n    const updatedReview = await Review.findByIdAndUpdate(\r\n      id,\r\n      { verifiedBuyer: verifiedBuyer === 'true' || verifiedBuyer === true },\r\n      { new: true, runValidators: true }\r\n    ).populate('userId', 'name email');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: `Review ${updatedReview?.verifiedBuyer ? 'marked as verified buyer' : 'removed verified buyer status'}`,\r\n      data: updatedReview\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error updating verified buyer status',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get user's own reviews (authenticated users only)\r\nexport const getUserReviews = async (req: any, res: Response) => {\r\n  try {\r\n    const { page = 1, limit = 10 } = req.query;\r\n    const userId = req.user._id;\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n    \r\n    const reviews = await Review.find({ userId })\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Review.countDocuments({ userId });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        reviews,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit))\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching user reviews',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Get star distribution for a product (public route)\r\nexport const getProductStarDistribution = async (req: Request, res: Response) => {\r\n  try {\r\n    const { productId } = req.params;\r\n\r\n    // Aggregate to get count of reviews for each star rating\r\n    const starDistribution = await Review.aggregate([\r\n      { $match: { productId } },\r\n      {\r\n        $group: {\r\n          _id: '$rating',\r\n          count: { $sum: 1 }\r\n        }\r\n      },\r\n      { $sort: { _id: 1 } } // Sort by star rating (1-5)\r\n    ]);\r\n\r\n    // Create a complete distribution object (including 0 counts for missing ratings)\r\n    const distribution = {\r\n      1: 0,\r\n      2: 0,\r\n      3: 0,\r\n      4: 0,\r\n      5: 0\r\n    };\r\n\r\n    // Fill in the actual counts\r\n    starDistribution.forEach(item => {\r\n      distribution[item._id as keyof typeof distribution] = item.count;\r\n    });\r\n\r\n    // Calculate total reviews and average rating\r\n    const totalReviews = Object.values(distribution).reduce((sum, count) => sum + count, 0);\r\n    const weightedSum = Object.entries(distribution).reduce((sum, [star, count]) => {\r\n      return sum + (Number(star) * count);\r\n    }, 0);\r\n    const averageRating = totalReviews > 0 ? Number((weightedSum / totalReviews).toFixed(2)) : 0;\r\n\r\n    // Calculate percentages\r\n    const percentageDistribution = Object.entries(distribution).reduce((acc, [star, count]) => {\r\n      acc[star as keyof typeof acc] = totalReviews > 0 ? Number(((count / totalReviews) * 100).toFixed(1)) : 0;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        productId,\r\n        totalReviews,\r\n        averageRating,\r\n        distribution,\r\n        percentageDistribution,\r\n        breakdown: [\r\n          { stars: 5, count: distribution[5], percentage: percentageDistribution['5'] },\r\n          { stars: 4, count: distribution[4], percentage: percentageDistribution['4'] },\r\n          { stars: 3, count: distribution[3], percentage: percentageDistribution['3'] },\r\n          { stars: 2, count: distribution[2], percentage: percentageDistribution['2'] },\r\n          { stars: 1, count: distribution[1], percentage: percentageDistribution['1'] }\r\n        ]\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Error fetching star distribution',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n// Export upload middleware\r\nexport const uploadReviewImages = getReviewUploadMiddleware();\r\n","import express from 'express';\r\nimport * as reviewController from '@/controllers/review.controller';\r\nimport { validateUserAccess, validateAdminAccess } from '@/middleware/auth.middleware';\r\n\r\nconst reviewsRouter = express.Router();\r\n\r\n// Public routes - No authentication required\r\nreviewsRouter.get('/product/:productId', reviewController.getProductReviews);\r\nreviewsRouter.get('/product/:productId/distribution', reviewController.getProductStarDistribution);\r\nreviewsRouter.get('/:id', reviewController.getReview);\r\n\r\n// Protected routes - Authenticated users only\r\nreviewsRouter.use(validateUserAccess);\r\n\r\n// User routes - Verified users only (for creating reviews)\r\nreviewsRouter.post('/', reviewController.uploadReviewImages, reviewController.createReview);\r\nreviewsRouter.get('/user/my-reviews', reviewController.getUserReviews);\r\nreviewsRouter.put('/:id', reviewController.uploadReviewImages, reviewController.updateReview);\r\nreviewsRouter.delete('/:id', reviewController.deleteReview); // Own reviews or admin\r\nreviewsRouter.patch('/:id/helpful', reviewController.toggleFoundHelpful);\r\n\r\n// Admin only routes\r\nreviewsRouter.get('/', validateAdminAccess, reviewController.getAllReviews);\r\nreviewsRouter.patch('/:id/verified-buyer', validateAdminAccess, reviewController.toggleVerifiedBuyer);\r\n\r\nexport default reviewsRouter;\r\n","import mongoose, { Document } from \"mongoose\";\r\n\r\nexport interface ICart extends Document {\r\n  userId: mongoose.Types.ObjectId;\r\n  items: Array<{\r\n    productId: string;\r\n    variantId: string;\r\n    quantity: number;\r\n    price: number;\r\n    title: string;\r\n    image: string;\r\n  }>;\r\n  totalPrice: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst cartSchema = new mongoose.Schema<ICart>(\r\n  {\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: \"User\",\r\n    },\r\n    items: [\r\n      {\r\n        productId: { type: String, required: true },\r\n        variantId: { type: String, required: true },\r\n        quantity: { type: Number, required: true, min: 1 },\r\n        price: { type: Number, required: true },\r\n        title: { type: String, required: true },\r\n        image: { type: String },\r\n      },\r\n    ],\r\n    totalPrice: { type: Number, required: true, default: 0 },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nexport const Cart = mongoose.model<ICart>(\"Cart\", cartSchema);\r\n","import { Request, Response } from \"express\";\r\nimport { Cart } from \"@/models/cart.model\";\r\nimport shopifyService from \"@/services/shopify.service\";\r\n\r\n// Get user's cart\r\nexport const getCart = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n\r\n    let cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      cart = new Cart({ userId, items: [], totalPrice: 0 });\r\n      await cart.save();\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: cart,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error fetching cart\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Add item to cart\r\nexport const addToCart = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const { productId, variantId, quantity, price, title } = req.body;\r\n\r\n    if (!productId || !variantId || !quantity || !price || !title) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message:\r\n          \"Product ID, variant ID, quantity, price, and title are required\",\r\n      });\r\n    }\r\n\r\n    if (quantity < 1) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"Quantity must be at least 1\",\r\n      });\r\n    }\r\n\r\n    let cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      cart = new Cart({ userId, items: [], totalPrice: 0 });\r\n    }\r\n\r\n    // Check if item already exists in cart\r\n    const existingItemIndex = cart.items.findIndex(\r\n      (item) => item.productId === productId && item.variantId === variantId\r\n    );\r\n\r\n    let image: string | undefined = undefined;\r\n    if (existingItemIndex === -1) {\r\n      // Extract numeric product ID if it's a Shopify GraphQL global ID\r\n      let numericProductId = productId;\r\n      const match = typeof productId === \"string\" && productId.match(/(\\d+)$/);\r\n      if (match) {\r\n        numericProductId = match[1];\r\n      }\r\n      // Fetch product image from Shopify\r\n      const product = await shopifyService.getProduct(numericProductId);\r\n      // Shopify REST API returns images as an array\r\n      if (product && product.images && product.images.length > 0) {\r\n        image = product.images[0].src;\r\n      }\r\n    }\r\n\r\n    if (existingItemIndex > -1) {\r\n      // Update quantity if item exists\r\n      cart.items[existingItemIndex].quantity += Number(quantity);\r\n    } else {\r\n      // Add new item with image\r\n      cart.items.push({\r\n        productId,\r\n        variantId,\r\n        quantity: Number(quantity),\r\n        price: Number(price),\r\n        title,\r\n        image, // store image url in cart item\r\n      });\r\n    }\r\n\r\n    // Recalculate total price\r\n    cart.totalPrice = cart.items.reduce((total, item) => {\r\n      return total + item.price * item.quantity;\r\n    }, 0);\r\n\r\n    await cart.save();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Item added to cart successfully\",\r\n      data: cart,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error adding item to cart\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Update cart item quantity\r\nexport const updateCartItem = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const { variantId } = req.params;\r\n    const { quantity } = req.body;\r\n\r\n    if (!quantity || quantity < 1) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"Valid quantity is required (minimum 1)\",\r\n      });\r\n    }\r\n\r\n    const cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Cart not found\",\r\n      });\r\n    }\r\n\r\n    const itemIndex = cart.items.findIndex(\r\n      (item) => item.variantId === variantId\r\n    );\r\n\r\n    if (itemIndex === -1) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Item not found in cart\",\r\n      });\r\n    }\r\n\r\n    // Update quantity\r\n    cart.items[itemIndex].quantity = Number(quantity);\r\n\r\n    // Recalculate total price\r\n    cart.totalPrice = cart.items.reduce((total, item) => {\r\n      return total + item.price * item.quantity;\r\n    }, 0);\r\n\r\n    await cart.save();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Cart item updated successfully\",\r\n      data: cart,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error updating cart item\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Remove item from cart\r\nexport const removeFromCart = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const { variantId } = req.params;\r\n\r\n    const cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Cart not found\",\r\n      });\r\n    }\r\n\r\n    const itemIndex = cart.items.findIndex(\r\n      (item) => item.variantId === variantId\r\n    );\r\n\r\n    if (itemIndex === -1) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Item not found in cart\",\r\n      });\r\n    }\r\n\r\n    // Remove item\r\n    cart.items.splice(itemIndex, 1);\r\n\r\n    // Recalculate total price\r\n    cart.totalPrice = cart.items.reduce((total, item) => {\r\n      return total + item.price * item.quantity;\r\n    }, 0);\r\n\r\n    await cart.save();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Item removed from cart successfully\",\r\n      data: cart,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error removing item from cart\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Clear entire cart\r\nexport const clearCart = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n\r\n    const cart = await Cart.findOne({ userId });\r\n\r\n    if (!cart) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Cart not found\",\r\n      });\r\n    }\r\n\r\n    cart.items = [];\r\n    cart.totalPrice = 0;\r\n\r\n    await cart.save();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Cart cleared successfully\",\r\n      data: cart,\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error clearing cart\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Get cart item count\r\nexport const getCartItemCount = async (req: any, res: Response) => {\r\n  try {\r\n    const userId = req.user._id;\r\n\r\n    const cart = await Cart.findOne({ userId });\r\n\r\n    const itemCount = cart\r\n      ? cart.items.reduce((total, item) => total + item.quantity, 0)\r\n      : 0;\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        itemCount,\r\n        totalItems: cart ? cart.items.length : 0,\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error fetching cart item count\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Admin: Get all carts (admin only)\r\nexport const getAllCarts = async (req: Request, res: Response) => {\r\n  try {\r\n    const { page = 1, limit = 10, userId } = req.query;\r\n\r\n    const filter: any = {};\r\n    if (userId) filter.userId = userId;\r\n\r\n    const skip = (Number(page) - 1) * Number(limit);\r\n\r\n    const carts = await Cart.find(filter)\r\n      .populate(\"userId\", \"name email\")\r\n      .sort({ updatedAt: -1 })\r\n      .skip(skip)\r\n      .limit(Number(limit));\r\n\r\n    const total = await Cart.countDocuments(filter);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        carts,\r\n        pagination: {\r\n          page: Number(page),\r\n          limit: Number(limit),\r\n          total,\r\n          totalPages: Math.ceil(total / Number(limit)),\r\n        },\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error fetching carts\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Admin: Delete any cart (admin only)\r\nexport const deleteCart = async (req: any, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const userRole = req.user.role;\r\n\r\n    // Check if user is admin\r\n    const isAdmin = userRole === \"admin\" || userRole === \"super_admin\";\r\n\r\n    if (!isAdmin) {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: \"Admin access required\",\r\n      });\r\n    }\r\n\r\n    const cart = await Cart.findById(id);\r\n    if (!cart) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Cart not found\",\r\n      });\r\n    }\r\n\r\n    await Cart.findByIdAndDelete(id);\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"Cart deleted successfully\",\r\n    });\r\n  } catch (error: any) {\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Error deleting cart\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n","import { Router } from \"express\";\r\nimport * as cartController from \"@/controllers/cart.controller\";\r\nimport { validateAdminAccess } from \"@/middleware/auth.middleware\";\r\n\r\nconst cartRouter = Router();\r\n\r\n// All cart routes require user authentication (handled in api.router.ts)\r\n\r\n// User cart routes\r\ncartRouter.get(\"/\", cartController.getCart);\r\ncartRouter.post(\"/add\", cartController.addToCart);\r\ncartRouter.put(\"/update/:variantId\", cartController.updateCartItem);\r\ncartRouter.delete(\"/remove/:variantId\", cartController.removeFromCart);\r\ncartRouter.delete(\"/clear\", cartController.clearCart);\r\ncartRouter.get(\"/count\", cartController.getCartItemCount);\r\n\r\n// Admin only routes\r\ncartRouter.get(\"/admin/all\", validateAdminAccess, cartController.getAllCarts);\r\ncartRouter.delete(\"/admin/:id\", validateAdminAccess, cartController.deleteCart);\r\n\r\nexport default cartRouter;\r\n","import { Router } from 'express';\r\nimport shopifyRouter from '@/routes/shopify.routes';\r\nimport authRouter from '@/routes/auth.routes';\r\nimport pagesRouter from '@/routes/pages.routes';\r\nimport testimonialsRouter from '@/routes/testimonials.routes';\r\nimport inquiryRouter from '@/routes/inquiry.routes';\r\nimport userRouter from '@/routes/user.routes';\r\nimport reviewsRouter from '@/routes/reviews.routes';\r\nimport cartRouter from './routes/cart.routes';\r\nimport { validateUserAccess } from './middleware/auth.middleware';\r\n\r\nconst apiRouter = Router();\r\n\r\n// Import all routers\r\napiRouter.use('/shopify', shopifyRouter);\r\napiRouter.use(\"/auth\", authRouter);\r\napiRouter.use('/pages', pagesRouter);\r\napiRouter.use('/testimonials', testimonialsRouter);\r\napiRouter.use('/inquiries', inquiryRouter);\r\napiRouter.use('/users', userRouter);\r\napiRouter.use('/reviews', reviewsRouter);\r\napiRouter.use('/cart', validateUserAccess ,cartRouter);\r\n\r\nexport default apiRouter;","import { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const errorHandler = (\r\n  err: any,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  console.error(\"Global error:\", err);\r\n  res.status(500).json({\r\n    error: \"Internal Server Error\",\r\n    message:\r\n      process.env.NODE_ENV === \"development\"\r\n        ? err.message\r\n        : \"Something went wrong\", // Hide details in production\r\n  });\r\n};\r\n","import mongoose from 'mongoose';\r\n\r\nexport const connectToDatabase = async (): Promise<void> => {\r\n  try {\r\n    const mongoUri = process.env.MONGO_URI || 'mongodb://localhost:27017/ecommerce';\r\n    \r\n    await mongoose.connect(mongoUri);\r\n    \r\n    console.log('📦 Connected to MongoDB database');\r\n  } catch (error) {\r\n    console.error('❌ MongoDB connection error:', error);\r\n    process.exit(1);\r\n  }\r\n};\r\n","import dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nimport express from \"express\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport cors from \"cors\";\r\nimport apiRouter from \"@/api.router\";\r\nimport { errorHandler } from \"@/middleware/errorHandler.middleware\";\r\nimport { connectToDatabase } from \"@/config/db.config\";\r\nimport { validateShopifyConfig } from \"@/config/shopify.config\";\r\n\r\nconst app = express();\r\n\r\n// Connect to MongoDB\r\nconnectToDatabase();\r\n\r\n// Validate Shopify configuration\r\nvalidateShopifyConfig();\r\n\r\n// Configure middleware stack - order matters\r\napp.use(express.json()); // Parse JSON request bodies\r\napp.use(cookieParser()); // Parse cookies from request headers\r\n\r\napp.use(\r\n  cors({\r\n    origin: [\r\n      \"https://linesapparel.ca\",\r\n      \"https://www.linesapparel.ca\",\r\n      \"http://localhost:3000\" // keep for local dev\r\n    ],\r\n    credentials: true,\r\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\"],\r\n    allowedHeaders: [\"Content-Type\", \"Authorization\", \"X-Requested-With\"],\r\n    exposedHeaders: [\"Set-Cookie\"],\r\n    maxAge: 86400\r\n  })\r\n);\r\n\r\n\r\n// Mount API routes under /api prefix\r\napp.use(\"/api\", apiRouter);\r\n\r\n// Health check endpoint\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Admin dashboard API is running...\");\r\n});\r\n\r\napp.get('/dbString', (req, res) => {\r\n  if (process.env.Node_env === \"production\") {\r\n    res.status(200).json({ message: \"Production MongoURL\" });\r\n  }\r\n  res.status(200).json({ message: \"Dev MongoURL\" });\r\n\r\n})\r\n\r\n// Catch-all handler for undefined routes\r\napp.use((req, res) => {\r\n  res.status(404).json({ error: \"Route not found\" });\r\n});\r\n\r\n// Global error handling middleware\r\napp.use(errorHandler);\r\n\r\nexport default app;\r\n","// Load environment variables at the very beginning\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nimport app from './app';\r\nimport { shopifyConfig } from '@/config/shopify.config';\r\n\r\nconst port = process.env.PORT || 8080;\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`🚀 Server is running on port ${port}`);\r\n  console.log(`🔑 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  console.log(`🏪 Connected to Shopify store: ${shopifyConfig.storeUrl}`);\r\n});"]}